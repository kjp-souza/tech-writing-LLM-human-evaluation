{"question": "What is a 406 error and how can I troubleshoot it?", "answer": "A 406 error is an HTTP status code that indicates that the server cannot produce a response that matches the content types specified in the request's \"Accept\" header. This error typically occurs when the client requests a response in a format that the server cannot provide.  To troubleshoot a 406 error, you can follow these steps:  1. Check the \"Accept\" header in your request: Ensure that you have specified the correct content type in the \"Accept\" header. For example, if you are expecting a  JSON response, make sure the \"Accept\" header includes \"application/json\".  2. Review the SDK and API documentation: Make sure you are using the correct content type as specified in the documentation. The documentation should provide information on the supported content types for each API endpoint.  3. Contact Network as Code support: If you are still experiencing the 406 error after checking the \"Accept\" header and reviewing the documentation, you can reach  out to Network as Code support for further assistance. They can help troubleshoot the issue and provide guidance on resolving it.  Remember to provide specific details about your request and any error messages you are receiving when contacting support.", "ground_truth_answers": "### 406 bad-acceptable errors This error usually occurs when a client tries to send a request with an `Accept` header specifying a content type the server cannot process. For example, if the client requests a response other than `JSON`.Then, the server might not be able to produce an appropriate one through the `Accept` headers.- Check that you have the correct `Accept` header in your request - Review the SDK and API documentation and make sure to use the correct content type - Try contacting our [Network as Code support e-mail address](mailto:support@networkascode.com) for further assistance."}
{"question": "What does Network Exposure Function (NEF) do?", "answer": "The Network Exposure Function (NEF) is an enabler of Network as Code (NaC). Its main task is to expose information to applications in a reliable and secure manner. NEF abstracts capabilities from the core network and allows the creation of innovative services to address the needs of connected industries, smart cities, public safety, and enterprises. It plays a crucial role in providing Mobile as Code capabilities, complementing NaC by enabling the exposure of network information and services to applications.", "ground_truth_answers": "### Network Exposure Function (NEF) The relation between **NEF** and Network as Code is simple: **NEF** is a **NaC** enabler, it complements the Network-as-Code by providing Mobile as Code. Its main task is to expose information to applications in a reliable and safe way. It does that by abstracting capabilities from your core Network and allowing the creation of innovative services to address the needs of connected industries, smart cities, public safety and enterprises. Click [here](https://www.nokia.com/networks/core-networks/network-exposure-function/) to learn more."}
{"question": "Can I build new APIs using Network as Code?", "answer": "Sorry, I don't have information to offer on that topic.", "ground_truth_answers": "**Network as Code** simplifies network programming and makes it accessible to developers without telecom experience, so they can call APIs with native 5G capabilities in an easier and less time-consuming way. Beyond calling APIs, NaC provides simple SDK code that will abstract network capabilities in intelligent ways under a few minutes. However, an SDK is not a standalone solution for creating an API from scratch. It's important to point out that the Network-as-Code SDKs work on top of existing APIs to provide a more convenient and user-friendly way to interact with them."}
{"question": "What is the difference between Specialized Networks (slices) and Quality-of-service-on-Demand sessions? If there is no difference, just say they are the same thing, but if there is a difference, explain it.", "answer": "Specialized Networks, also known as slices, and Quality-of-Service on Demand (QoD) sessions are different concepts within Network as Code.  Specialized Networks, or slices, refer to customizable parts of a larger network. They allow for the logical separation and efficient use of network resources according to specific use cases. Slices can be created to offer tailored network flexibility, speeds, and capacities to suit different needs. They enable the creation of different virtual network instances and the allocation of network resources to specific slices or unique QoD sessions.  On the other hand, QoD sessions focus on managing the quality of service for a specific device or application within a network. QoD sessions allow developers to prioritize bandwidth, latency, and other network parameters for a particular device or service. These sessions can be created, modified, and terminated as needed,  providing fine-grained control over network performance.  In summary, Specialized Networks (slices) provide the infrastructure for creating different virtual network instances, while QoD sessions allow for the management of quality of service within those instances.", "ground_truth_answers": "# Specialized Networks  Network as Code offers easy-to-use SDKs to control Specialized Networks and adapt the 5G network to a myriad of use cases. With Specialized Networks, you can ensure the logical separation and efficient use of network resources according to your current demand.  Think of a Slice (or specialized network) as a customizable part of a much larger network. Now, imagine you can change this specialized portion to meet the needs of each specific use-case. Let's say, when you need reliable connection for your business, streaming, gaming event or the endless possibilities a slice can be created for. Any time you need, at your own demand, a slice can be created to offer tailored network flexibility, speeds and capacities to suit different needs.  Behind this technology, there is a lot of complexity that our SDK code abstracts for you. Like the partitioning of the network infrastructure, which enables the creation of different virtual network instances. The Specialized Networks SDK makes the link between the Network Operator and different devices or applications. So, you can allocate network resources to a given slice or unique QoD session that will guarantee network performance. While also being able to associate specific devices or applications with a particular network slice.  # Quality-of-service on Demand (QoD)  The QoD feature allows establishing prioritized connections between your mobile device and another device or service on the internet.  It allows you to manage the amount of stable bandwidth (connection speed) and the latency (message delay) of network connections for each device, according to your current demand. This prioritized connection flow is established through what we call \"QoD sessions\".  ## What is Quality of Service (QoS)?  This is the technology underpinning QoD. Oftentimes, predictable network performance can be difficult to achieve when there's heavy network traffic, over wide area network (WAN) connections, especially for applications or devices that will require a lot from the network. QoS is then used to manage and prioritize the flow of data over a network.  For instance, when prioritizing critical services like Voice over IP (VoIP), video streaming or latency-sensitive applications, it is important to ensure that different traffic types receive preferential or specific treatment, according to demand. So, by managing bandwidth, latency and balancing the network, QoS empowers a more consistent and reliable user experience! "}
{"question": "How can I find out the device ID of an enterprise-owned drone?", "answer": "To find out the device ID of an enterprise-owned drone, you can use the Network as Code (NaC) SDKs. The device ID can be a phone number or an email-like identifier for the device. You can identify the drone by its unique identifier assigned by the network operator or by using an external ID specific to the drone.","ground_truth_answers": "That is why the Device ID (also referred to as External Identifier or Network Access Identifier, e.g.: `device@testcsp.net`) can work as an alternate.  In Business to Business (B2B) scenarios, the enterprise owns mobile subscriptions for the devices, and they obtain it from the Network Operator. So, they would know their Device IDs. Enterprises should provide the Device ID related information so that their applications can use them to identify the devices on the mobile network. "}
{"question": "Can you provide an example of attaching a device to a slice using an SDK?", "answer": "Certainly! Here's an example of how you can attach a device to a slice using the Network as Code SDK:  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import DeviceIpv4Addr from network_as_code.models.slice import Slice  # Create a Network as Code client client = NetworkAsCodeClient(...)  # Get the device you want to attach device = client.devices.get(...)  # Get the slice you want to attach the device to slice = client.slices.get(...)  # Attach the device to the slice slice.attach(device, \"https://example.org/notify\", notification_auth_token=\"replace-with-your-auth-token\") ```  In this example, you first create a Network as Code client using your credentials. Then, you retrieve the device and slice objects using their respective IDs or names. Finally, you use the `attach()` method of the slice object to attach the device to the slice, providing the notification URL and authentication token.        Make sure to replace `...` with the appropriate values for your specific use case.", "ground_truth_answers": "## Attaching a device to a slice  Device attachment presupposes a slice already exists and that it is active. Learn how to activate a slice [here](/docs/slicing/slice-activate-deactivate#activating-a-slice). So, after creating and activating the desired slice according to the steps in the [previous page](/docs/slicing/slice-creation), simply use the `slice.attach()` method to attach a device.  ```python from network_as_code.client import NetworkAsCodeClient  from network_as_code.models.device import DeviceIpv4Addr  from network_as_code.models.slice import(     NetworkIdentifier,     Slice,     SliceInfo,     AreaOfService,     Point,     Throughput )  device = client.devices.get(...)  slice = client.slices.create(...)  slice.attach(     device,     \"https://example.org/notify\",     notification_auth_token=\"replace-with-your-auth-token\" ) ```"}
{"question": "What method do I use to activate a slice?", "answer": "To activate a slice, you can use the `activate()` method on the slice object. Here's an example:  ```python slice.activate() ```  Make sure that the slice is already created before activating it.", "ground_truth_answers": "## Activating a slice  Slice activation presupposes a slice already exists. So, after creating the desired slice according to the steps in the [previous page](/docs/slicing/slice-creation), simply use the `client.slices.activate()` method to activate the slice.  ```python from network_as_code.client import NetworkAsCodeClient  from network_as_code.models.device import DeviceIpv4Addr  from network_as_code.models.slice import(     NetworkIdentifier,     Slice,     SliceInfo,     AreaOfService,     Point,     Throughput )  device = client.devices.get(...)  # First, create or get a slice my_slice = client.slices.create(...)  # Get a slice by its ID slice = client.slices.get(my_slice.name)  # Then, activate it slice.activate() ```  > **NOTE:** A slice might take a significant amount of time (minutes) to be set up. > So, you can [configure a web server](/docs/slicing/slice-notifications) > to receive to receive slice-status notifications. > This will allow you to know when a slice is ready to be configured as desired."}
{"question": "What are the ways I can get a device's IPv4 or IPv6 addresses in B2B scenarios?", "answer": "In B2B scenarios, you can get a device's IPv4 or IPv6 addresses in the following ways:  1. By using the device's external ID: In this case, you can use the device's external ID (e.g., \"device@testcsp.net\") to retrieve its IPv4 or IPv6 addresses.  2. By using the device's phone number: If the device is associated with a phone number, you can use the phone number to retrieve its IPv4 or IPv6 addresses.  3. By using the device's NAT information: If the device is behind a NAT (Network Address Translation), you can retrieve its private IPv4 address and public IPv4 address (along with the optional port) to identify the device.  4. By using the device's IPv6 address: If the device is using an IPv6 address, you can retrieve its IPv6 address to identify the device.  These methods can be used to uniquely identify devices and retrieve their IPv4 or IPv6 addresses in B2B scenarios.", "ground_truth_answers": "IP Addresses are dynamic. So, they are difficult to identify in advance. Whoever owns the IoT device will need to implement a way for it to tell its current IP address(es). Let's suppose you or a client owns a business that manages flying drones. Then, you (or the client) would have an operations center to manage/control these drones. They would need to connect to this operations center whenever they were on and send their connection details with current IP address(es).", "answer": "In B2B scenarios, you can get a device's IPv4 or IPv6 addresses in the following ways:  1. By using the device's external ID: In this case, you can use the device's external ID (e.g., \"device@testcsp.net\") to retrieve its IPv4 or IPv6 addresses.  2. By using the device's phone number: If the device is associated with a phone number, you can use the phone number to retrieve its IPv4 or IPv6 addresses.  3. By using the device's NAT information: If the device is behind a NAT (Network Address Translation), you can retrieve its private IPv4 address and public IPv4 address (along with the optional port) to identify the device.  4. By using the device's IPv6 address: If the device is using an IPv6 address, you can retrieve its IPv6 address to identify the device.  These methods can be used to uniquely identify devices and retrieve their IPv4 or IPv6 addresses in B2B scenarios."}
{"question": "Document in GitHub-flavored markdown the following Python SDK snippet, delimited by triple hash signs ### and instruct a developer how to use it and what it does. Explain how they can find the necessary information to fill in the details for their applications, OS and attach their application to slices. Also include a parameter table with 2 columns labeled as follows: 'Parameters' and 'Description'. Then, add the rows listing down the attachment parameters and a brief description of each of them below your code snippets and documentation: ###from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo) my_slice = client.slices.create(...) my_slice.activate() my_slice.attach(device, traffic_categories=TrafficCategories(apps=Apps(os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\", apps=[\"ENTERPRISE\", \"ENTERPRISE2\"])))###.", "answer": "### Python SDK Snippet Documentation  The provided Python SDK snippet demonstrates how to use the Network as Code (NaC) SDK to create a slice, activate it, and attach an application to the slice. This snippet assumes that you have already imported the necessary modules and created a NetworkAsCodeClient object named 'client'.  To use this snippet, you need to replace the ellipsis (...) with the appropriate values for your application and network. Here's a breakdown of the steps:  1. Import the necessary modules: ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr from network_as_code.models.slice import Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo ```  2. Create a slice: ```python my_slice = client.slices.create(...) ``` Replace the ellipsis (...) with the required parameters for creating a slice, such as the name, network identifier, slice info, and area of service.  3. Activate the slice: ```python my_slice.activate() ``` This step activates the slice, making it ready to accept applications.  4. Attach an application to the slice: ```python my_slice.attach(device, traffic_categories=TrafficCategories(apps=Apps(os=97a498e3-fc92-5c94-8986-0333d06e4e47, apps=[ENTERPRISE, ENTERPRISE2]))) ``` Replace the ellipsis (...) with the appropriate values for the device and traffic categories. The 'device' parameter represents the device object to attach, and the 'traffic_categories' parameter specifies the traffic categories for the application.  ### Attachment Parameters  Here are the parameters required for attaching an application to a slice:  |      Parameters      |                          Description                          | |----------------------|--------------------------------------------------------------| |       `device`       | The device object to attach to the slice                      | | `traffic_categories` | The traffic categories for the application (e.g., ENTERPRISE) |  Ensure that you provide the correct values for these parameters when using the SDK snippet in your application. You can find more information about the necessary  details for your application and OS in the NaC documentation or by referring to the specific SDK documentation for your programming language.", "ground_truth_answers": "--- tags: application attachment, network slice application attachment, specialized network application attachment desc: Learn how to attach or detach an application from a Network as Code slice ---  # Attaching and detaching applications  Besides [attaching](/docs/slicing/attach-detach) a device to a network slice as whole, you can attach specific applications instead. Application attachment enables fine-grained slice control with different connectivity parameters set for different applications on a device.  **What does this mean?** When you [create](/docs/slicing/slice-creation) a network slice with specific connectivity parameters, such as different amounts of bandwidth a device or slice can get, area of service, etc., you can make sure that only specific applications can access these resources.  This is done by attaching both the device and applications to the slice you just created. Then, when you are done, you can detach them in the same way.  For example, if an enterprise is authorized to use a device and create network slices for it, they can also attach specific applications to them. This way, they can prioritize network resources according to their multiple business applications.  > **NOTE:** Before attaching an enterprise app into a slice, > make sure the enterprise has the right consent to access the device and create specialized network (slices) for it. > Learn how to do it in our [Consent & Identity management policy](/docs/general-concepts/consent-identity-mgmt).  ## Attaching an application to a slice  If you have already [created](/docs/slicing/slice-creation) and [activated](/docs/slicing/slice-activate-deactivate#activating-a-slice) a slice, you can just attach a specific application to it by following this SDK example:  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr  from network_as_code.models.slice import (     Apps,     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput,     TrafficCategories ) ... # The slice needs to be created and activated my_slice.activate()  attachment = my_slice.attach(     device,     # Use HTTPS to send notifications     # about slice attachments.     notification_url=\"https://notify.me/here\",     notification_auth_token=\"replace-with-your-auth-token\",     traffic_categories=TrafficCategories(         apps=Apps(             # This is the OS ID used by Android             os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\",             apps=[\"ENTERPRISE\", \"ENTERPRISE2\"]         )     ) ) ```  ### What's behind this technology?  There's a set of rules, which will enable the User Equipment (UE) to know how to route the traffic to specific applications within the network environment. On the network side, Network as Code will configure these UE Route Selection Policy (URSP) rules according to the Operating System Identifier (OSId) and OS specific Application Identifier (OsAppId) to establish the traffic categories. So, all you will need to provide is the `OSId`, according to the OS you use (Android, iOS, etc.) and the `OsAppId` (Enterprise app name).  For example, [Android's 5G Network Slicing documentation](https://source.android.com/docs/core/connect/5g-slicing) defines their `OSId` with a 5 (UUID) sequence, which is `97a498e3-fc92-5c94-8986-0333d06e4e47`. You can also refer to the [iOS documentation](https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_networking_slicing_trafficcategory) for further information on their `OSId`. Now, for the `OsAppId`, you will need to pass the enterprise app name.  ## Detaching an application from a slice  You can follow the complete steps on how to [detach a device from a slice](/docs/slicing/attach-detach#detaching-a-device-from-a-slice), since it also works for application attachments. Briefly, here is a snippet which summarizes the process of detaching and deleting an application:  ```python # Detach a device my_slice.detach(device)  # Delete an attachment by calling the method # on the attachment previously created attachment.delete()  # Deactivate and delete a slice my_slice.deactivate() my_slice.delete() ```  ### Attachment parameters  The attach/detachment methods have the following parameters:  `traffic_categories` is an optional parameter in the format \"[OS]/[Category]\", which is converted by NaC backend into an OSId and OSAppId according to URSP rules. If this parameter is omitted, the slice will be attached as a default for the device. Otherwise, the slice will be only used for the mentioned traffic categories.  |      **Parameters**       | **Description**                                                                                                                 | | :-----------------------: | ------------------------------------------------------------------------------------------------------------------------------- | |         `device`          | Device ID callback parameter used to perform attachment/detachment                                                              | |   `traffic_categories`    | (Optional) It should contain the `OSId`, according to the OS you use (Android, iOS, etc.) and the `OsAppId` (Enterprise app name) | |          `apps`           | The enterprise app name (ID)                                                                                                    | |           `os`            | The **OSId** identifier according to the OS you use (Android, iOS, etc.)                                                        | |    `notification_url`     | (Optional) The recipient's `HTTP` endpoint, which is a web server configured to receive `POST` requests.                        | | `notification_auth_token` | The password used to identify the sender of the notification.                                                                   | |           `id`            | It's possible to define an identifier for the attachment and use it to get the resource.                                        |"}
{"question": "Document in GitHub-flavored markdown the following Python SDK snippet, delimited by triple hash signs ###, and instruct a developer how to use it and what it does. Explain how they can find the necessary information to get a slice and modify it. Also include a parameter table with 2 columns labeled as follows: 'Parameters' and 'Description'. Then, add the rows listing down the attachment parameters and a brief description of each of them below your code snippets and documentation: ###import network_as_code as nac from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo, Throughput) client = nac.NetworkAsCodeClient(...) # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\") # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(max_data_connections = 12, max_devices = 3, slice_downlink_throughput=Throughput(guaranteed=10, maximum=10), slice_uplink_throughput=Throughput(guaranteed=10, maximum=10), device_downlink_throughput=Throughput(guaranteed=10, maximum=10), device_uplink_throughput=Throughput(guaranteed=10, maximum=10))###.", "answer": "To use the provided Python SDK snippet, follow these steps:  1. Import the necessary modules and classes:  ```python import network_as_code as nac from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo, Throughput) ```  2. Create a Network as Code client object:  ```python client = nac.NetworkAsCodeClient(...) ```  3. Get the slice you want to modify by providing its name:  ```python slice = client.slices.get(slice-name_1) ```  4. Modify the desired parameters of the slice using the `modify()` method. Note that the `modify()` method does not preserve previously configured parameters, so  make sure to reconfigure all the parameters you wish to modify:  ```python slice.modify(     max_data_connections=12,     max_devices=3,     slice_downlink_throughput=Throughput(guaranteed=10, maximum=10),     slice_uplink_throughput=Throughput(guaranteed=10, maximum=10),     device_downlink_throughput=Throughput(guaranteed=10, maximum=10),     device_uplink_throughput=Throughput(guaranteed=10, maximum=10) ) ```  To find the necessary information to get a slice and modify it, you will need to refer to the Network as Code documentation or consult the API reference. The documentation will provide detailed information on how to interact with the Network as Code API, including how to authenticate, retrieve slices, and modify their parameters.  Here is a parameter table with the attachment parameters and their descriptions:  |      Parameters      |                      Description                      | | :------------------: | :---------------------------------------------------: | | `max_data_connections` | Maximum number of data connection sessions in the slice | |     `max_devices`     |            Maximum number of devices in the slice            | | `slice_downlink_throughput` | Specify the amount of bandwidth the slice can get in the downlink direction | | `slice_uplink_throughput` | Specify the amount of bandwidth the slice can get in the uplink direction | | `device_downlink_throughput` | Specify the amount of bandwidth a device can get in the downlink direction | | `device_uplink_throughput` | Specify the amount of bandwidth a device can get in the uplink direction |  Make sure to provide the appropriate values for these parameters when modifying the slice.", "ground_truth_answers": "--- tags: network slice modification, slice modification, modifying a specialized network, modifying a slice desc: Learn how to modify a network slice ---  # Modifying slices  You can modify the parameters for an existing slice with the `modify()` method.  ## Modifying a slice  In the following SDK snippet, first we [get](/docs/slicing/get-slice) an existing slice that we need to modify. Next, we modify some slice parameters, such as `slice throughput`, `maximum number of data connections` and `devices`. So, we use the `modify()` method to make these changes. Learn more about the parameters that can be modified [below](/docs/slicing/modify-slices#slice-parameters).  ```python import network_as_code as nac from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput )  client = nac.NetworkAsCodeClient(...)  # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\")  # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(     max_data_connections = 12,     max_devices = 3,     slice_downlink_throughput=Throughput(guaranteed=10, maximum=10),     slice_uplink_throughput=Throughput(guaranteed=10, maximum=10),     device_downlink_throughput=Throughput(guaranteed=10, maximum=10),     device_uplink_throughput=Throughput(guaranteed=10, maximum=10) ) ```  ### Slice parameters  These are the slice parameters that can be modified using the `modify()` method and a brief description of them.  |                      **Parameters**                       | **Description**                                          | | :-------------------------------------------------------: | -------------------------------------------------------- | | `slice_uplink_throughput` or `slice_downlink_throughput`  | Specify the amount of bandwidth the slice can get.       | | `device_uplink_throughput` or `device_downlink_throughput` | Specify the amount of bandwidth the device can get.     | |                  `max_data_connections`                   | Maximum number of data connection sessions in the slice. | |                       `max_devices`                       | Maximum number of devices in the slice.                  |  #### What is a notification URL?  [Learn more](/docs/general-concepts/notification-url) about the notification URL/auth token and how to create a web server for them.  > **Note that** the snippets above assume > you have already created a slice before, > which you can learn how to do [here](/docs/slicing/creation). > It also implies that you have already created a [Network-as-Code client](/docs/general-concepts/network-as-code-client) > and [identified your mobile network device](/docs/general-concepts/identifying-devices#identifying-devices-by-ip-address-and-port)."}
{"question": "Document in GitHub-flavored markdown the following Python SDK snippet, delimited by triple hash signs ### and instruct a developer how to use it and what it does. Include a short explanation of about 7 lines total on what is behind the most relevant some concepts so a user can get a gist of it before using the code. Explain how they can find the necessary information to fill in the details for their applications, OS and attach their application to slices. Also include a parameter table with 2 columns labeled as follows: 'Parameters' and 'Description'. Then, add the rows listing down the attachment parameters and a brief description of each of them below your code snippets and documentation. Remember to order the headings accordingly and provide metadata in your markdown following the same pattern as your knowledge sources. Here is the snippet to be documented: ###from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo) my_slice = client.slices.create(...) my_slice.activate() my_slice.attach(device, traffic_categories=TrafficCategories(apps=Apps(os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\", apps=[\"ENTERPRISE\", \"ENTERPRISE2\"])))###.", "answer": "### Attaching an Application to a Network Slice  The provided Python SDK snippet demonstrates how to attach an application to a network slice using the Nokia Network as Code (NaC) SDK.   Before using the code, make sure you have the necessary information about your application, operating system, and the network slice you want to attach to. You will need to fill in the details for your application's OS and traffic categories.  Here is a breakdown of the code:  1. Import the necessary modules: ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr from network_as_code.models.slice import Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo ```  2. Create a network slice: ```python my_slice = client.slices.create(...) ``` This code creates a network slice using the `client.slices.create()` method. You will need to provide the necessary parameters for the slice creation, such as the name, network identifier, slice info, and area of service.  3. Activate the network slice: ```python my_slice.activate() ``` This code activates the network slice using the `activate()` method.  4. Attach the application to the network slice: ```python my_slice.attach(device, traffic_categories=TrafficCategories(apps=Apps(os=97a498e3-fc92-5c94-8986-0333d06e4e47, apps=[ENTERPRISE, ENTERPRISE2]))) ``` This code attaches the application to the network slice using the `attach()` method. You will need to provide the device and traffic categories for the attachment. In this example, the traffic categories include the application's operating system and the list of applications.  Here is a parameter table with the attachment parameters and their descriptions:  |    **Parameters**    | **Description**                                                                                       | | :------------------: | ----------------------------------------------------------------------------------------------------- | |      `device`        | The device object representing the application's device.                                              | | `traffic_categories` | The traffic categories for the attachment, including the application's operating system and apps list. |  To use this code snippet, replace the placeholders (`...`) with the appropriate values for your application, operating system, and network slice. Make sure you have the necessary information about your application and network slice before using the code.  Remember to import the required modules and create a NaC client object before using the code snippet.Summarized history for the next exchange: The user requested documentation for a Python SDK snippet that attaches an application to a network slice using the Nokia Network as Code (NaC) SDK. The assistant provided a breakdown of the code, including importing necessary modules, creating a network slice, activating the slice, and attaching the application. The assistant also included a parameter table with descriptions and instructions for using the code snippet. _", "ground_truth_answers": "--- tags: application attachment, network slice application attachment, specialized network application attachment desc: Learn how to attach or detach an application from a Network as Code slice ---  # Attaching and detaching applications  Besides [attaching](/docs/slicing/attach-detach) a device to a network slice as whole, you can attach specific applications instead. Application attachment enables fine-grained slice control with different connectivity parameters set for different applications on a device.  **What does this mean?** When you [create](/docs/slicing/slice-creation) a network slice with specific connectivity parameters, such as different amounts of bandwidth a device or slice can get, area of service, etc., you can make sure that only specific applications can access these resources.  This is done by attaching both the device and applications to the slice you just created. Then, when you are done, you can detach them in the same way.  For example, if an enterprise is authorized to use a device and create network slices for it, they can also attach specific applications to them. This way, they can prioritize network resources according to their multiple business applications.  > **NOTE:** Before attaching an enterprise app into a slice, > make sure the enterprise has the right consent to access the device and create specialized network (slices) for it. > Learn how to do it in our [Consent & Identity management policy](/docs/general-concepts/consent-identity-mgmt).  ## Attaching an application to a slice  If you have already [created](/docs/slicing/slice-creation) and [activated](/docs/slicing/slice-activate-deactivate#activating-a-slice) a slice, you can just attach a specific application to it by following this SDK example:  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr  from network_as_code.models.slice import (     Apps,     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput,     TrafficCategories ) ... # The slice needs to be created and activated my_slice.activate()  attachment = my_slice.attach(     device,     # Use HTTPS to send notifications     # about slice attachments.     notification_url=\"https://notify.me/here\",     notification_auth_token=\"replace-with-your-auth-token\",     traffic_categories=TrafficCategories(         apps=Apps(             # This is the OS ID used by Android             os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\",             apps=[\"ENTERPRISE\", \"ENTERPRISE2\"]         )     ) ) ```  ### What's behind this technology?  There's a set of rules, which will enable the User Equipment (UE) to know how to route the traffic to specific applications within the network environment. On the network side, Network as Code will configure these UE Route Selection Policy (URSP) rules according to the Operating System Identifier (OSId) and OS specific Application Identifier (OsAppId) to establish the traffic categories. So, all you will need to provide is the `OSId`, according to the OS you use (Android, iOS, etc.) and the `OsAppId` (Enterprise app name).  For example, [Android's 5G Network Slicing documentation](https://source.android.com/docs/core/connect/5g-slicing) defines their `OSId` with a 5 (UUID) sequence, which is `97a498e3-fc92-5c94-8986-0333d06e4e47`. You can also refer to the [iOS documentation](https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_networking_slicing_trafficcategory) for further information on their `OSId`. Now, for the `OsAppId`, you will need to pass the enterprise app name.  ## Detaching an application from a slice  You can follow the complete steps on how to [detach a device from a slice](/docs/slicing/attach-detach#detaching-a-device-from-a-slice), since it also works for application attachments. Briefly, here is a snippet which summarizes the process of detaching and deleting an application:  ```python # Detach a device my_slice.detach(device)  # Delete an attachment by calling the method # on the attachment previously created attachment.delete()  # Deactivate and delete a slice my_slice.deactivate() my_slice.delete() ```  ### Attachment parameters  The attach/detachment methods have the following parameters:  `traffic_categories` is an optional parameter in the format \"[OS]/[Category]\", which is converted by NaC backend into an OSId and OSAppId according to URSP rules. If this parameter is omitted, the slice will be attached as a default for the device. Otherwise, the slice will be only used for the mentioned traffic categories.  |      **Parameters**       | **Description**                                                                                                                 | | :-----------------------: | ------------------------------------------------------------------------------------------------------------------------------- | |         `device`          | Device ID callback parameter used to perform attachment/detachment                                                              | |   `traffic_categories`    | (Optional) It should contain the `OSId`, according to the OS you use (Android, iOS, etc.) and the `OsAppId` (Enterprise app name) | |          `apps`           | The enterprise app name (ID)                                                                                                    | |           `os`            | The **OSId** identifier according to the OS you use (Android, iOS, etc.)                                                        | |    `notification_url`     | (Optional) The recipient's `HTTP` endpoint, which is a web server configured to receive `POST` requests.                        | | `notification_auth_token` | The password used to identify the sender of the notification.                                                                   | |           `id`            | It's possible to define an identifier for the attachment and use it to get the resource.                                        |"}
{"question": "Document in GitHub-flavored markdown the following Python SDK snippet, delimited by triple hash signs ###, and instruct a developer how to use it and what it does. Include a short explanation of about 7 lines total on what is behind the most relevant some concepts so a user can get a gist of it before using the code.  Explain how they can find the necessary information to get a slice and modify it. Also include a parameter table with 2 columns labeled as follows: 'Parameters' and 'Description'. Then, add the rows listing down the attachment parameters and a brief description of each of them below your code snippets and documentation. Remember to order the headings accordingly and provide metadata in your markdown following the same pattern as your knowledge sources. Here is the snippet to be documented: ###import network_as_code as nac from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo, Throughput) client = nac.NetworkAsCodeClient(...) # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\") # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(max_data_connections = 12, max_devices = 3, slice_downlink_throughput=Throughput(guaranteed=10, maximum=10), slice_uplink_throughput=Throughput(guaranteed=10, maximum=10), device_downlink_throughput=Throughput(guaranteed=10, maximum=10), device_uplink_throughput=Throughput(guaranteed=10, maximum=10))###.", "answer": "### Modifying a Network Slice  The provided Python SDK snippet demonstrates how to modify an existing network slice using the Network as Code SDK.   To use this code snippet, you need to have the Network as Code SDK installed and create a `client` object using the `nac.NetworkAsCodeClient(...)` method.   Next, you can retrieve the slice you want to modify using the `client.slices.get()` method, passing the name of the slice as a parameter.   Once you have the slice object, you can modify its parameters using the `slice.modify()` method. In the example, we modify the `max_data_connections`, `max_devices`, `slice_downlink_throughput`, `slice_uplink_throughput`, `device_downlink_throughput`, and `device_uplink_throughput` parameters.  It's important to note that when using the `modify()` method, you need to reconfigure all the parameters you wish to modify. The method does not preserve previously configured ones.   Here is an example of how to modify a network slice:  ```python import network_as_code as nac from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput )  client = nac.NetworkAsCodeClient(...)  # Get the slice you want to modify slice = client.slices.get(\"slice-name_1\")  # Modify the slice parameters slice.modify(     max_data_connections=12,     max_devices=3,     slice_downlink_throughput=Throughput(guaranteed=10, maximum=10),     slice_uplink_throughput=Throughput(guaranteed=10, maximum=10),     device_downlink_throughput=Throughput(guaranteed=10, maximum=10),     device_uplink_throughput=Throughput(guaranteed=10, maximum=10) ) ```  #### Slice Modification Parameters  |      **Parameters**       | **Description**                                                                                   | | :-----------------------: | ------------------------------------------------------------------------------------------------- | | `max_data_connections`    | The maximum number of data connection sessions allowed in the slice.                               | |      `max_devices`        | The maximum number of devices allowed in the slice.                                               | | `slice_downlink_throughput`| The amount of downlink bandwidth guaranteed and maximum for the slice.                             | | `slice_uplink_throughput`  | The amount of uplink bandwidth guaranteed and maximum for the slice.                               | | `device_downlink_throughput`| The amount of downlink bandwidth guaranteed and maximum for each device in the slice.             | | `device_uplink_throughput`  | The amount of uplink bandwidth guaranteed and maximum for each device in the slice.               |  You can find more information about the available parameters and their descriptions in the [Network as Code documentation](https://network-as-code-docs.example.com).", "ground_truth_answers": "--- tags: network slice modification, slice modification, modifying a specialized network, modifying a slice desc: Learn how to modify a network slice ---  # Modifying slices  You can modify the parameters for an existing slice with the `modify()` method.  ## Modifying a slice  In the following SDK snippet, first we [get](/docs/slicing/get-slice) an existing slice that we need to modify. Next, we modify some slice parameters, such as `slice throughput`, `maximum number of data connections` and `devices`. So, we use the `modify()` method to make these changes. Learn more about the parameters that can be modified [below](/docs/slicing/modify-slices#slice-parameters).  ```python import network_as_code as nac from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput )  client = nac.NetworkAsCodeClient(...)  # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\")  # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(     max_data_connections = 12,     max_devices = 3,     slice_downlink_throughput=Throughput(guaranteed=10, maximum=10),     slice_uplink_throughput=Throughput(guaranteed=10, maximum=10),     device_downlink_throughput=Throughput(guaranteed=10, maximum=10),     device_uplink_throughput=Throughput(guaranteed=10, maximum=10) ) ```  ### Slice parameters  These are the slice parameters that can be modified using the `modify()` method and a brief description of them.  |                      **Parameters**                       | **Description**                                          | | :-------------------------------------------------------: | -------------------------------------------------------- | | `slice_uplink_throughput` or `slice_downlink_throughput`  | Specify the amount of bandwidth the slice can get.       | | `device_uplink_throughput` or `device_downlink_throughput` | Specify the amount of bandwidth the device can get.     | |                  `max_data_connections`                   | Maximum number of data connection sessions in the slice. | |                       `max_devices`                       | Maximum number of devices in the slice.                  |  #### What is a notification URL?  [Learn more](/docs/general-concepts/notification-url) about the notification URL/auth token and how to create a web server for them.  > **Note that** the snippets above assume > you have already created a slice before, > which you can learn how to do [here](/docs/slicing/creation). > It also implies that you have already created a [Network-as-Code client](/docs/general-concepts/network-as-code-client) > and [identified your mobile network device](/docs/general-concepts/identifying-devices#identifying-devices-by-ip-address-and-port)."}