{"question": "What is a 406 error and how can I troubleshoot it?", "answer": "A 406 error is an HTTP status code that indicates that the server cannot produce a response matching the client's requested content type. It usually occurs when the client sends a request with an \"Accept\" header specifying a content type that the server cannot process.  To troubleshoot a 406 error, you can follow these steps:  1. Check the \"Accept\" header in your request and ensure that it is set to a content type that the server supports. The server may only be able to produce responses in specific formats, such as JSON or XML.  2. Review the SDK and API documentation to ensure that you are using the correct content type in your request. The documentation should specify the supported content types for each API endpoint.  3. If you are still experiencing the error, you can try contacting the Network as Code support team for further assistance. They can help you identify any potential issues with your request or provide guidance on resolving the error.  Remember to provide as much information as possible when seeking support, including the specific API endpoint you are trying to access and  the details of your request. This will help the support team troubleshoot the issue more effectively.", "ground_truth_answers": "### 406 bad-acceptable errors This error usually occurs when a client tries to send a request with an `Accept` header specifying a content type the server cannot process. For example, if the client requests a response other than `JSON`.Then, the server might not be able to produce an appropriate one through the `Accept` headers.- Check that you have the correct `Accept` header in your request - Review the SDK and API documentation and make sure to use the correct content type - Try contacting our [Network as Code support e-mail address](mailto:support@networkascode.com) for further assistance."}
{"question": "What does Network Exposure Function (NEF) do?", "answer": "The Network Exposure Function (NEF) is an enabler of Network as Code (NaC). Its main task is to expose information to applications in a reliable and secure manner. NEF abstracts capabilities from the core network and allows the creation of innovative services to address the needs of connected industries, smart cities, public safety, and enterprises. It provides a way for applications to access network resources and capabilities through APIs, enabling developers to easily integrate  network functionality into their applications.", "ground_truth_answers": "### Network Exposure Function (NEF) The relation between **NEF** and Network as Code is simple: **NEF** is a **NaC** enabler, it complements the Network-as-Code by providing Mobile as Code. Its main task is to expose information to applications in a reliable and safe way. It does that by abstracting capabilities from your core Network and allowing the creation of innovative services to address the needs of connected industries, smart cities, public safety and enterprises. Click [here](https://www.nokia.com/networks/core-networks/network-exposure-function/) to learn more."}
{"question": "Can I build new APIs using Network as Code?", "answer": "Sorry, I don't have information to offer on that topic.", "ground_truth_answers": "**Network as Code** simplifies network programming and makes it accessible to developers without telecom experience, so they can call APIs with native 5G capabilities in an easier and less time-consuming way. Beyond calling APIs, NaC provides simple SDK code that will abstract network capabilities in intelligent ways under a few minutes. However, an SDK is not a standalone solution for creating an API from scratch. It's important to point out that the Network-as-Code SDKs work on top of existing APIs to provide a more convenient and user-friendly way to interact with them."}
{"question": "What is the difference between Specialized Networks (slices) and Quality-of-service-on-Demand sessions? If there is no difference, just say they are the same thing, but if there is a difference, explain it.", "answer": "Specialized Networks, also known as slices, and Quality-of-Service on Demand (QoD) sessions are different concepts within Network as Code.  Specialized Networks, or slices, refer to customizable parts of a larger network. They allow for the logical separation and efficient use of network resources according to specific use cases. Slices can be created to offer tailored network flexibility, speeds, and capacities to suit different needs. They enable the allocation of network resources to a specific slice or unique QoD session, ensuring network performance for associated devices or applications.  On the other hand, QoD sessions focus on managing the quality of service for a specific device or application within a network. They allow developers to control the bandwidth, latency, and other network parameters for a particular session. QoD sessions can be created, modified, and terminated as needed, providing developers with fine-grained control over network resources for specific use cases.  In summary, Specialized Networks (slices) provide the infrastructure for creating customized network partitions, while QoD sessions enable developers to control the quality of service for specific devices or applications within those slices.", "ground_truth_answers": "# Specialized Networks  Network as Code offers easy-to-use SDKs to control Specialized Networks and adapt the 5G network to a myriad of use cases. With Specialized Networks, you can ensure the logical separation and efficient use of network resources according to your current demand.  Think of a Slice (or specialized network) as a customizable part of a much larger network. Now, imagine you can change this specialized portion to meet the needs of each specific use-case. Let's say, when you need reliable connection for your business, streaming, gaming event or the endless possibilities a slice can be created for. Any time you need, at your own demand, a slice can be created to offer tailored network flexibility, speeds and capacities to suit different needs.  Behind this technology, there is a lot of complexity that our SDK code abstracts for you. Like the partitioning of the network infrastructure, which enables the creation of different virtual network instances. The Specialized Networks SDK makes the link between the Network Operator and different devices or applications. So, you can allocate network resources to a given slice or unique QoD session that will guarantee network performance. While also being able to associate specific devices or applications with a particular network slice.  # Quality-of-service on Demand (QoD)  The QoD feature allows establishing prioritized connections between your mobile device and another device or service on the internet.  It allows you to manage the amount of stable bandwidth (connection speed) and the latency (message delay) of network connections for each device, according to your current demand. This prioritized connection flow is established through what we call \"QoD sessions\".  ## What is Quality of Service (QoS)?  This is the technology underpinning QoD. Oftentimes, predictable network performance can be difficult to achieve when there's heavy network traffic, over wide area network (WAN) connections, especially for applications or devices that will require a lot from the network. QoS is then used to manage and prioritize the flow of data over a network.  For instance, when prioritizing critical services like Voice over IP (VoIP), video streaming or latency-sensitive applications, it is important to ensure that different traffic types receive preferential or specific treatment, according to demand. So, by managing bandwidth, latency and balancing the network, QoS empowers a more consistent and reliable user experience!"}
{"question": "How can I find out the device ID of an enterprise-owned drone?", "answer": "To find out the device ID of an enterprise-owned drone, you can use the Network as Code (NaC) SDKs. The device ID can be an email-like identifier or a phone number assigned to the drone. You can retrieve the device ID by querying the NaC API with the necessary parameters, such as the drone's unique identifier or other identifying information.", "ground_truth_answers": "That is why the Device ID (also referred to as External Identifier or Network Access Identifier, e.g.: `device@testcsp.net`) can work as an alternate.  In Business to Business (B2B) scenarios, the enterprise owns mobile subscriptions for the devices, and they obtain it from the Network Operator. So, they would know their Device IDs. Enterprises should provide the Device ID related information so that their applications can use them to identify the devices on the mobile network."}
{"question": "Can you provide an example of attaching a device to a slice using an SDK?", "answer": "Certainly! Here's an example of how you can attach a device to a slice using the Network as Code SDK:  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import DeviceIpv4Addr from network_as_code.models.slice import NetworkIdentifier, Slice  # Create a Network-as-Code client client = NetworkAsCodeClient(...)  # Get the device you want to attach device = client.devices.get(...)  # Get the slice you want to attach the device to slice = client.slices.get(...)  # Attach the device to the slice slice.attach(device, \"https://example.org/notify\", notification_auth_token=\"replace-with-your-auth-token\") ```  In this example, you first create a Network-as-Code client and retrieve the device and slice objects you want to work with. Then, you use the `attach()` method of the slice object to attach the device to the slice. You provide the device object, the notification URL, and an optional notification authentication token.        Make sure to replace `...` with the appropriate values for your use case.", "ground_truth_answers": "## Attaching a device to a slice  Device attachment presupposes a slice already exists and that it is active. Learn how to activate a slice [here](/docs/slicing/slice-activate-deactivate#activating-a-slice). So, after creating and activating the desired slice according to the steps in the [previous page](/docs/slicing/slice-creation), simply use the `slice.attach()` method to attach a device.  ```python from network_as_code.client import NetworkAsCodeClient  from network_as_code.models.device import DeviceIpv4Addr  from network_as_code.models.slice import(     NetworkIdentifier,     Slice,     SliceInfo,     AreaOfService,     Point,     Throughput )  device = client.devices.get(...)  slice = client.slices.create(...)  slice.attach(     device,     \"https://example.org/notify\",     notification_auth_token=\"replace-with-your-auth-token\" ) ```"}
{"question": "What method do I use to activate a slice?", "answer": "To activate a slice, you can use the `activate()` method. Here's an example using the Network as Code SDK:  ```python from network_as_code.client import NetworkAsCodeClient  client = NetworkAsCodeClient(...)  # Get the slice you want to activate slice = client.slices.get(slice_id)  # Activate the slice slice.activate() ```  Make sure you have the necessary permissions and the slice is in the correct state to be activated.", "ground_truth_answers": "## Activating a slice  Slice activation presupposes a slice already exists. So, after creating the desired slice according to the steps in the [previous page](/docs/slicing/slice-creation), simply use the `client.slices.activate()` method to activate the slice.  ```python from network_as_code.client import NetworkAsCodeClient  from network_as_code.models.device import DeviceIpv4Addr  from network_as_code.models.slice import(     NetworkIdentifier,     Slice,     SliceInfo,     AreaOfService,     Point,     Throughput )  device = client.devices.get(...)  # First, create or get a slice my_slice = client.slices.create(...)  # Get a slice by its ID slice = client.slices.get(my_slice.name)  # Then, activate it slice.activate() ```  > **NOTE:** A slice might take a significant amount of time (minutes) to be set up. > So, you can [configure a web server](/docs/slicing/slice-notifications) > to receive to receive slice-status notifications. > This will allow you to know when a slice is ready to be configured as desired."}
{"question": "What are the ways I can get a device's IPv4 or IPv6 addresses in B2B scenarios?", "answer": "In B2B scenarios, you can get a device's IPv4 or IPv6 addresses in the following ways:  1. **Device ID:** In B2B scenarios, the enterprise owns mobile subscriptions for the devices and they obtain it from the Network Operator. The Device ID (also referred to as External Identifier or Network Access Identifier) can work as an alternate way to identify devices on the mobile network.  2. **Phone Number:** Phone numbers can act as a simple identifier for devices or users owning the mobile subscription in B2C scenarios.  3. **IP Address Reporting:** IP addresses are dynamic, so they are difficult to identify in advance. Whoever owns the IoT device will need to implement a way for  it to report its current IP address(es) to the system. For example, a drone can send its connection details with current IP address(es) to an operations center.    These methods can be used to identify devices and retrieve their IPv4 or IPv6 addresses in B2B scenarios.", "ground_truth_answers": "IP Addresses are dynamic. So, they are difficult to identify in advance. Whoever owns the IoT device will need to implement a way for it to tell its current IP address(es). Let's suppose you or a client owns a business that manages flying drones. Then, you (or the client) would have an operations center to manage/control these drones. They would need to connect to this operations center whenever they were on and send their connection details with current IP address(es)."}
{"question": "Document in GitHub-flavored markdown the following Python SDK snippet, delimited by triple hash signs ### and instruct a developer how to use it and what it does. Explain how they can find the necessary information to fill in the details for their applications, OS and attach their application to slices. Also include a parameter table with 2 columns labeled as follows: 'Parameters' and 'Description'. Then, add the rows listing down the attachment parameters and a brief description of each of them below your code snippets and documentation: ###from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo) my_slice = client.slices.create(...) my_slice.activate() my_slice.attach(device, traffic_categories=TrafficCategories(apps=Apps(os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\", apps=[\"ENTERPRISE\", \"ENTERPRISE2\"])))###.", "answer": "### Python SDK Snippet  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr from network_as_code.models.slice import Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo  # Create a Network-as-Code client client = NetworkAsCodeClient(token=\"<your-application-key-here>\")  # Create a slice my_slice = client.slices.create(     name=\"slice-name\",     network_id=NetworkIdentifier(mcc=\"123\", mnc=\"456\"),     slice_info=SliceInfo(service_type=\"eMBB\", differentiator=\"123456\"),     area_of_service=AreaOfService(polygon=[         Point(latitude=42.0, longitude=42.0),         Point(latitude=41.0, longitude=42.0),         Point(latitude=42.0, longitude=41.0),         Point(latitude=42.0, longitude=42.0)     ]) )  # Activate the slice my_slice.activate()  # Attach a device to the slice device = Device(     device_id=\"device-id\",     device_ipv4_addr=DeviceIpv4Addr(ipv4_addr=\"192.168.0.1\", port=1234) ) my_slice.attach(     device=device,     traffic_categories=TrafficCategories(         apps=Apps(             os=\"<your-os-id-here>\",             apps=[\"ENTERPRISE\", \"ENTERPRISE2\"]         )     ) ) ```  ### Instructions  To use the above Python SDK snippet, follow these steps:  1. Install the `network-as-code` package using `pip`:     ```    pip install network-as-code    ```  2. Import the necessary classes and modules:     ```python    from network_as_code.client import NetworkAsCodeClient    from network_as_code.models.device import Device, DeviceIpv4Addr    from network_as_code.models.slice import Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo    ```  3. Create a `NetworkAsCodeClient` object by providing your application key:     ```python    client = NetworkAsCodeClient(token=\"<your-application-key-here>\")    ```     > **Note:** You can obtain the application key by creating an account and generating an API key in the Network as Code developer portal.  4. Create a slice by calling the `client.slices.create()` method and providing the necessary parameters:     ```python    my_slice = client.slices.create(        name=\"slice-name\",        network_id=NetworkIdentifier(mcc=\"123\", mnc=\"456\"),        slice_info=SliceInfo(service_type=\"eMBB\", differentiator=\"123456\"),        area_of_service=AreaOfService(polygon=[            Point(latitude=42.0, longitude=42.0),            Point(latitude=41.0, longitude=42.0),            Point(latitude=42.0, longitude=41.0),            Point(latitude=42.0, longitude=42.0)        ])    )    ```     > **Note:** Replace the values in the parameters with the appropriate information for your application, such as the slice name, network ID (MCC and MNC), service type, and area of service.  5. Activate the slice by calling the `my_slice.activate()` method:     ```python    my_slice.activate()    ```  6. Attach a device to the slice by creating a `Device` object and calling the `my_slice.attach()` method:     ```python    device = Device(        device_id=\"device-id\",        device_ipv4_addr=DeviceIpv4Addr(ipv4_addr=\"192.168.0.1\", port=1234)    )    my_slice.attach(        device=device,        traffic_categories=TrafficCategories(            apps=Apps(                os=\"<your-os-id-here>\",                apps=[\"ENTERPRISE\", \"ENTERPRISE2\"]            )        )    )    ```     > **Note:** Replace the values in the parameters with the appropriate information for your device, such as the device ID, IPv4 address, port, and OS ID.  ### Attachment Parameters  Here are the parameters required for attaching a device to a slice:  |      **Parameters**      | **Description**                                                                                          | | :----------------------: | -------------------------------------------------------------------------------------------------------- | |      `device_id`         | The ID of the device that will be attached to the slice.                                                 | | `device_ipv4_addr`       | The IPv4 address and port of the device.                                                                 | | `traffic_categories`     | The traffic categories and applications that the device will use.                                        | | `os`                     | The ID of the operating system that the device is running.                                               | | `apps`                   | The list of applications that the device will use.                                                       |  > **Note:** Make sure to replace the placeholder values with the actual information for your device and application.", "ground_truth_answers": "--- tags: application attachment, network slice application attachment, specialized network application attachment desc: Learn how to attach or detach an application from a Network as Code slice ---  # Attaching and detaching applications  Besides [attaching](/docs/slicing/attach-detach) a device to a network slice as whole, you can attach specific applications instead. Application attachment enables fine-grained slice control with different connectivity parameters set for different applications on a device.  **What does this mean?** When you [create](/docs/slicing/slice-creation) a network slice with specific connectivity parameters, such as different amounts of bandwidth a device or slice can get, area of service, etc., you can make sure that only specific applications can access these resources.  This is done by attaching both the device and applications to the slice you just created. Then, when you are done, you can detach them in the same way.  For example, if an enterprise is authorized to use a device and create network slices for it, they can also attach specific applications to them. This way, they can prioritize network resources according to their multiple business applications.  > **NOTE:** Before attaching an enterprise app into a slice, > make sure the enterprise has the right consent to access the device and create specialized network (slices) for it. > Learn how to do it in our [Consent & Identity management policy](/docs/general-concepts/consent-identity-mgmt).  ## Attaching an application to a slice  If you have already [created](/docs/slicing/slice-creation) and [activated](/docs/slicing/slice-activate-deactivate#activating-a-slice) a slice, you can just attach a specific application to it by following this SDK example:  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr  from network_as_code.models.slice import (     Apps,     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput,     TrafficCategories ) ... # The slice needs to be created and activated my_slice.activate()  attachment = my_slice.attach(     device,     # Use HTTPS to send notifications     # about slice attachments.     notification_url=\"https://notify.me/here\",     notification_auth_token=\"replace-with-your-auth-token\",     traffic_categories=TrafficCategories(         apps=Apps(             # This is the OS ID used by Android             os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\",             apps=[\"ENTERPRISE\", \"ENTERPRISE2\"]         )     ) ) ```  ### What's behind this technology?  There's a set of rules, which will enable the User Equipment (UE) to know how to route the traffic to specific applications within the network environment. On the network side, Network as Code will configure these UE Route Selection Policy (URSP) rules according to the Operating System Identifier (OSId) and OS specific Application Identifier (OsAppId) to establish the traffic categories. So, all you will need to provide is the `OSId`, according to the OS you use (Android, iOS, etc.) and the `OsAppId` (Enterprise app name).  For example, [Android's 5G Network Slicing documentation](https://source.android.com/docs/core/connect/5g-slicing) defines their `OSId` with a 5 (UUID) sequence, which is `97a498e3-fc92-5c94-8986-0333d06e4e47`. You can also refer to the [iOS documentation](https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_networking_slicing_trafficcategory) for further information on their `OSId`. Now, for the `OsAppId`, you will need to pass the enterprise app name.  ## Detaching an application from a slice  You can follow the complete steps on how to [detach a device from a slice](/docs/slicing/attach-detach#detaching-a-device-from-a-slice), since it also works for application attachments. Briefly, here is a snippet which summarizes the process of detaching and deleting an application:  ```python # Detach a device my_slice.detach(device)  # Delete an attachment by calling the method # on the attachment previously created attachment.delete()  # Deactivate and delete a slice my_slice.deactivate() my_slice.delete() ```  ### Attachment parameters  The attach/detachment methods have the following parameters:  `traffic_categories` is an optional parameter in the format \"[OS]/[Category]\", which is converted by NaC backend into an OSId and OSAppId according to URSP rules. If this parameter is omitted, the slice will be attached as a default for the device. Otherwise, the slice will be only used for the mentioned traffic categories.  |      **Parameters**       | **Description**                                                                                                                 | | :-----------------------: | ------------------------------------------------------------------------------------------------------------------------------- | |         `device`          | Device ID callback parameter used to perform attachment/detachment                                                              | |   `traffic_categories`    | (Optional) It should contain the `OSId`, according to the OS you use (Android, iOS, etc.) and the `OsAppId` (Enterprise app name) | |          `apps`           | The enterprise app name (ID)                                                                                                    | |           `os`            | The **OSId** identifier according to the OS you use (Android, iOS, etc.)                                                        | |    `notification_url`     | (Optional) The recipient's `HTTP` endpoint, which is a web server configured to receive `POST` requests.                        | | `notification_auth_token` | The password used to identify the sender of the notification.                                                                   | |           `id`            | It's possible to define an identifier for the attachment and use it to get the resource.                                        |"}
{"question": "Document in GitHub-flavored markdown the following Python SDK snippet, delimited by triple hash signs ###, and instruct a developer how to use it and what it does. Explain how they can find the necessary information to get a slice and modify it. Also include a parameter table with 2 columns labeled as follows: 'Parameters' and 'Description'. Then, add the rows listing down the attachment parameters and a brief description of each of them below your code snippets and documentation: ###import network_as_code as nac from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo, Throughput) client = nac.NetworkAsCodeClient(...) # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\") # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(max_data_connections = 12, max_devices = 3, slice_downlink_throughput=Throughput(guaranteed=10, maximum=10), slice_uplink_throughput=Throughput(guaranteed=10, maximum=10), device_downlink_throughput=Throughput(guaranteed=10, maximum=10), device_uplink_throughput=Throughput(guaranteed=10, maximum=10))###.", "answer": "To use the provided Python SDK snippet, follow these steps:  1. Import the necessary modules:  ```python import network_as_code as nac from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo, Throughput) ```  2. Create a Network as Code client object:  ```python client = nac.NetworkAsCodeClient(...) ```  3. Get the slice you want to modify by providing its name:  ```python slice = client.slices.get(slice-name_1) ```  4. Modify the desired parameters of the slice using the `modify()` method. Note that you need to reconfigure all the parameters you wish to modify, as the `modify()` method does not preserve previously configured ones:  ```python slice.modify(     max_data_connections=12,     max_devices=3,     slice_downlink_throughput=Throughput(guaranteed=10, maximum=10),     slice_uplink_throughput=Throughput(guaranteed=10, maximum=10),     device_downlink_throughput=Throughput(guaranteed=10, maximum=10),     device_uplink_throughput=Throughput(guaranteed=10, maximum=10) ) ```  To find the necessary information to get a slice and modify it, you can refer to the Network as Code documentation. Specifically, you can look into the sections on slice creation and slice modification. The documentation provides detailed explanations and examples on how to use the SDK and the available parameters.          Here is a parameter table with the attachment parameters and their descriptions:  |      Parameters      |                           Description                            | | :------------------: | :--------------------------------------------------------------: | | `max_data_connections` | Maximum number of data connection sessions allowed in the slice. | |     `max_devices`     |              Maximum number of devices allowed.                  | | `slice_downlink_throughput` |   The amount of guaranteed and maximum downlink throughput for the slice. | | `slice_uplink_throughput` |   The amount of guaranteed and maximum uplink throughput for the slice. | | `device_downlink_throughput` |   The amount of guaranteed and maximum downlink throughput for a device in the slice. | | `device_uplink_throughput` |   The amount of guaranteed and maximum uplink throughput for a device in the slice. |  You can modify these parameters according to your requirements by providing the appropriate values in the `modify()` method.", "ground_truth_answers": "--- tags: network slice modification, slice modification, modifying a specialized network, modifying a slice desc: Learn how to modify a network slice ---  # Modifying slices  You can modify the parameters for an existing slice with the `modify()` method.  ## Modifying a slice  In the following SDK snippet, first we [get](/docs/slicing/get-slice) an existing slice that we need to modify. Next, we modify some slice parameters, such as `slice throughput`, `maximum number of data connections` and `devices`. So, we use the `modify()` method to make these changes. Learn more about the parameters that can be modified [below](/docs/slicing/modify-slices#slice-parameters).  ```python import network_as_code as nac from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput )  client = nac.NetworkAsCodeClient(...)  # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\")  # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(     max_data_connections = 12,     max_devices = 3,     slice_downlink_throughput=Throughput(guaranteed=10, maximum=10),     slice_uplink_throughput=Throughput(guaranteed=10, maximum=10),     device_downlink_throughput=Throughput(guaranteed=10, maximum=10),     device_uplink_throughput=Throughput(guaranteed=10, maximum=10) ) ```  ### Slice parameters  These are the slice parameters that can be modified using the `modify()` method and a brief description of them.  |                      **Parameters**                       | **Description**                                          | | :-------------------------------------------------------: | -------------------------------------------------------- | | `slice_uplink_throughput` or `slice_downlink_throughput`  | Specify the amount of bandwidth the slice can get.       | | `device_uplink_throughput` or `device_downlink_throughput` | Specify the amount of bandwidth the device can get.     | |                  `max_data_connections`                   | Maximum number of data connection sessions in the slice. | |                       `max_devices`                       | Maximum number of devices in the slice.                  |  #### What is a notification URL?  [Learn more](/docs/general-concepts/notification-url) about the notification URL/auth token and how to create a web server for them.  > **Note that** the snippets above assume > you have already created a slice before, > which you can learn how to do [here](/docs/slicing/creation). > It also implies that you have already created a [Network-as-Code client](/docs/general-concepts/network-as-code-client) > and [identified your mobile network device](/docs/general-concepts/identifying-devices#identifying-devices-by-ip-address-and-port)."}
{"question": "Document in GitHub-flavored markdown the following Python SDK snippet, delimited by triple hash signs ### and instruct a developer how to use it and what it does. Include a short explanation of about 7 lines total on what is behind the most relevant some concepts so a user can get a gist of it before using the code. Explain how they can find the necessary information to fill in the details for their applications, OS and attach their application to slices. Also include a parameter table with 2 columns labeled as follows: 'Parameters' and 'Description'. Then, add the rows listing down the attachment parameters and a brief description of each of them below your code snippets and documentation. Remember to order the headings accordingly and provide metadata in your markdown following the same pattern as your knowledge sources. Here is the snippet to be documented: ###from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo) my_slice = client.slices.create(...) my_slice.activate() my_slice.attach(device, traffic_categories=TrafficCategories(apps=Apps(os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\", apps=[\"ENTERPRISE\", \"ENTERPRISE2\"])))###.", "answer": "### Attaching an Application to a Network Slice  The provided Python SDK snippet demonstrates how to attach an application to a network slice using the Nokia Network as Code (NaC) SDK.   Before using the code, make sure you have the necessary information to fill in the details for your application and operating system. You will need to provide the following parameters:  - `device`: The device object representing the application you want to attach to the slice. - `traffic_categories`: The traffic categories for the application, which include the operating system and the list of applications associated with it.  To attach the application to the slice, follow these steps:  1. Import the necessary modules: ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr from network_as_code.models.slice import Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo ```  2. Create a network slice object: ```python my_slice = client.slices.create(...) ```  3. Activate the network slice: ```python my_slice.activate() ```  4. Attach the application to the slice: ```python my_slice.attach(device, traffic_categories=TrafficCategories(apps=Apps(os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\", apps=[\"ENTERPRISE\", \"ENTERPRISE2\"]))) ```  Make sure to replace the placeholder values with the actual information for your application and operating system.  #### Attachment Parameters  The `attach()` method requires the following parameters:  |   Parameters   |                             Description                             | | :------------: | :-----------------------------------------------------------------: | |    `device`    |       The device object representing the application to attach      | | `traffic_categories` | The traffic categories for the application, including the operating system and list of applications |  Note: The `os` parameter in the `traffic_categories` parameter refers to the operating system of the application. The `apps` parameter is a list of applications associated with the operating system.  By following these steps and providing the necessary information, you can attach your application to a network slice using the NaC SDK.", "ground_truth_answers": "--- tags: application attachment, network slice application attachment, specialized network application attachment desc: Learn how to attach or detach an application from a Network as Code slice ---  # Attaching and detaching applications  Besides [attaching](/docs/slicing/attach-detach) a device to a network slice as whole, you can attach specific applications instead. Application attachment enables fine-grained slice control with different connectivity parameters set for different applications on a device.  **What does this mean?** When you [create](/docs/slicing/slice-creation) a network slice with specific connectivity parameters, such as different amounts of bandwidth a device or slice can get, area of service, etc., you can make sure that only specific applications can access these resources.  This is done by attaching both the device and applications to the slice you just created. Then, when you are done, you can detach them in the same way.  For example, if an enterprise is authorized to use a device and create network slices for it, they can also attach specific applications to them. This way, they can prioritize network resources according to their multiple business applications.  > **NOTE:** Before attaching an enterprise app into a slice, > make sure the enterprise has the right consent to access the device and create specialized network (slices) for it. > Learn how to do it in our [Consent & Identity management policy](/docs/general-concepts/consent-identity-mgmt).  ## Attaching an application to a slice  If you have already [created](/docs/slicing/slice-creation) and [activated](/docs/slicing/slice-activate-deactivate#activating-a-slice) a slice, you can just attach a specific application to it by following this SDK example:  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr  from network_as_code.models.slice import (     Apps,     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput,     TrafficCategories ) ... # The slice needs to be created and activated my_slice.activate()  attachment = my_slice.attach(     device,     # Use HTTPS to send notifications     # about slice attachments.     notification_url=\"https://notify.me/here\",     notification_auth_token=\"replace-with-your-auth-token\",     traffic_categories=TrafficCategories(         apps=Apps(             # This is the OS ID used by Android             os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\",             apps=[\"ENTERPRISE\", \"ENTERPRISE2\"]         )     ) ) ```  ### What's behind this technology?  There's a set of rules, which will enable the User Equipment (UE) to know how to route the traffic to specific applications within the network environment. On the network side, Network as Code will configure these UE Route Selection Policy (URSP) rules according to the Operating System Identifier (OSId) and OS specific Application Identifier (OsAppId) to establish the traffic categories. So, all you will need to provide is the `OSId`, according to the OS you use (Android, iOS, etc.) and the `OsAppId` (Enterprise app name).  For example, [Android's 5G Network Slicing documentation](https://source.android.com/docs/core/connect/5g-slicing) defines their `OSId` with a 5 (UUID) sequence, which is `97a498e3-fc92-5c94-8986-0333d06e4e47`. You can also refer to the [iOS documentation](https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_networking_slicing_trafficcategory) for further information on their `OSId`. Now, for the `OsAppId`, you will need to pass the enterprise app name.  ## Detaching an application from a slice  You can follow the complete steps on how to [detach a device from a slice](/docs/slicing/attach-detach#detaching-a-device-from-a-slice), since it also works for application attachments. Briefly, here is a snippet which summarizes the process of detaching and deleting an application:  ```python # Detach a device my_slice.detach(device)  # Delete an attachment by calling the method # on the attachment previously created attachment.delete()  # Deactivate and delete a slice my_slice.deactivate() my_slice.delete() ```  ### Attachment parameters  The attach/detachment methods have the following parameters:  `traffic_categories` is an optional parameter in the format \"[OS]/[Category]\", which is converted by NaC backend into an OSId and OSAppId according to URSP rules. If this parameter is omitted, the slice will be attached as a default for the device. Otherwise, the slice will be only used for the mentioned traffic categories.  |      **Parameters**       | **Description**                                                                                                                 | | :-----------------------: | ------------------------------------------------------------------------------------------------------------------------------- | |         `device`          | Device ID callback parameter used to perform attachment/detachment                                                              | |   `traffic_categories`    | (Optional) It should contain the `OSId`, according to the OS you use (Android, iOS, etc.) and the `OsAppId` (Enterprise app name) | |          `apps`           | The enterprise app name (ID)                                                                                                    | |           `os`            | The **OSId** identifier according to the OS you use (Android, iOS, etc.)                                                        | |    `notification_url`     | (Optional) The recipient's `HTTP` endpoint, which is a web server configured to receive `POST` requests.                        | | `notification_auth_token` | The password used to identify the sender of the notification.                                                                   | |           `id`            | It's possible to define an identifier for the attachment and use it to get the resource.                                        |"}
{"question": "Document in GitHub-flavored markdown the following Python SDK snippet, delimited by triple hash signs ###, and instruct a developer how to use it and what it does. Include a short explanation of about 7 lines total on what is behind the most relevant some concepts so a user can get a gist of it before using the code.  Explain how they can find the necessary information to get a slice and modify it. Also include a parameter table with 2 columns labeled as follows: 'Parameters' and 'Description'. Then, add the rows listing down the attachment parameters and a brief description of each of them below your code snippets and documentation. Remember to order the headings accordingly and provide metadata in your markdown following the same pattern as your knowledge sources. Here is the snippet to be documented: ###import network_as_code as nac from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo, Throughput) client = nac.NetworkAsCodeClient(...) # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\") # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(max_data_connections = 12, max_devices = 3, slice_downlink_throughput=Throughput(guaranteed=10, maximum=10), slice_uplink_throughput=Throughput(guaranteed=10, maximum=10), device_downlink_throughput=Throughput(guaranteed=10, maximum=10), device_uplink_throughput=Throughput(guaranteed=10, maximum=10))###.", "answer": "### Modifying a Network Slice  The provided Python SDK snippet demonstrates how to modify an existing network slice using the Network as Code (NaC) SDK.   Before modifying a slice, you need to have the necessary information to identify and retrieve the slice you want to modify. In this case, you can use the `client.slices.get()` method to retrieve the slice by its name (`slice-name_1` in the example).  Once you have retrieved the slice, you can use the `slice.modify()` method to update the desired parameters. It's important to note that when using the `modify()` method, you need to reconfigure all the parameters you wish to modify. The method does not preserve previously configured ones.  In the provided code snippet, the following parameters are modified:  - `max_data_connections`: Maximum number of data connection sessions in the slice. - `max_devices`: Maximum number of devices in the slice. - `slice_downlink_throughput`: Amount of bandwidth for downlink traffic in the slice. - `slice_uplink_throughput`: Amount of bandwidth for uplink traffic in the slice. - `device_downlink_throughput`: Amount of bandwidth for downlink traffic for a specific device. - `device_uplink_throughput`: Amount of bandwidth for uplink traffic for a specific device.  To modify these parameters, you can update the values accordingly in the `slice.modify()` method.  Here is a parameter table with the modified parameters and their descriptions:  |       **Parameters**       | **Description**                                                                                   | | :------------------------: | ------------------------------------------------------------------------------------------------- | |  `max_data_connections`    | Maximum number of data connection sessions in the slice.                                          | |        `max_devices`       | Maximum number of devices in the slice.                                                           | | `slice_downlink_throughput` | Amount of bandwidth for downlink traffic in the slice.                                            | |  `slice_uplink_throughput` | Amount of bandwidth for uplink traffic in the slice.                                              | | `device_downlink_throughput`| Amount of bandwidth for downlink traffic for a specific device.                                   | |  `device_uplink_throughput`| Amount of bandwidth for uplink traffic for a specific device.                                     |  By modifying these parameters, you can customize the network slice according to your requirements.  Remember to refer to the NaC SDK documentation for more information on the available parameters and their usage.", "ground_truth_answers": "--- tags: network slice modification, slice modification, modifying a specialized network, modifying a slice desc: Learn how to modify a network slice ---  # Modifying slices  You can modify the parameters for an existing slice with the `modify()` method.  ## Modifying a slice  In the following SDK snippet, first we [get](/docs/slicing/get-slice) an existing slice that we need to modify. Next, we modify some slice parameters, such as `slice throughput`, `maximum number of data connections` and `devices`. So, we use the `modify()` method to make these changes. Learn more about the parameters that can be modified [below](/docs/slicing/modify-slices#slice-parameters).  ```python import network_as_code as nac from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput )  client = nac.NetworkAsCodeClient(...)  # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\")  # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(     max_data_connections = 12,     max_devices = 3,     slice_downlink_throughput=Throughput(guaranteed=10, maximum=10),     slice_uplink_throughput=Throughput(guaranteed=10, maximum=10),     device_downlink_throughput=Throughput(guaranteed=10, maximum=10),     device_uplink_throughput=Throughput(guaranteed=10, maximum=10) ) ```  ### Slice parameters  These are the slice parameters that can be modified using the `modify()` method and a brief description of them.  |                      **Parameters**                       | **Description**                                          | | :-------------------------------------------------------: | -------------------------------------------------------- | | `slice_uplink_throughput` or `slice_downlink_throughput`  | Specify the amount of bandwidth the slice can get.       | | `device_uplink_throughput` or `device_downlink_throughput` | Specify the amount of bandwidth the device can get.     | |                  `max_data_connections`                   | Maximum number of data connection sessions in the slice. | |                       `max_devices`                       | Maximum number of devices in the slice.                  |  #### What is a notification URL?  [Learn more](/docs/general-concepts/notification-url) about the notification URL/auth token and how to create a web server for them.  > **Note that** the snippets above assume > you have already created a slice before, > which you can learn how to do [here](/docs/slicing/creation). > It also implies that you have already created a [Network-as-Code client](/docs/general-concepts/network-as-code-client) > and [identified your mobile network device](/docs/general-concepts/identifying-devices#identifying-devices-by-ip-address-and-port)."}