{"question": "What is a 406 error and how can I troubleshoot it?", "answer": "A 406 error, also known as \"Not Acceptable,\" typically occurs when a client sends a request with an `Accept` header specifying a content type that the server cannot process. For example, if the client requests a response format other than what the server can provide, like asking for XML when the server only responds with JSON, the server might respond with a 406 error.  To troubleshoot a 406 error in the context of Nokia Network as Code, you should:  - Ensure that you have the correct `Accept` header in your request. The header should match the content type that the server is capable of providing. - Review the SDK and API documentation to make sure you are using the correct content type that the API expects. - If you continue to experience issues, consider reaching out to the Network as Code support team for further assistance by sending an email to support@networkascode.com.", "ground_truth_answers": "### 406 bad-acceptable errors This error usually occurs when a client tries to send a requestwith an `Accept` header specifying a content type the server cannot process. For example, if the client requests a response other than `JSON`.Then, the server might not be able to produce an appropriate one through the `Accept` headers.- Check that you have the correct `Accept` header in your request - Review the SDK and API documentation and make sure to use the correct content type - Try contacting our [Network as Code support e-mail address](mailto:support@networkascode.com) for further assistance."}
{"question": "What does Network Exposure Function (NEF) do?", "answer": "The Network Exposure Function (NEF) plays a critical role in the Network as Code (NaC) ecosystem by serving as an enabler for Mobile as Code. It functions by exposing information from the core network to applications in a secure and controlled manner. This allows for the creation of innovative services tailored to the needs of connected industries, smart cities, public safety, and enterprises. NEF abstracts the capabilities of the core network, which facilitates the integration of these  capabilities into applications through APIs, enhancing the potential for developers to innovate within the NaC platform.", "ground_truth_answers": "### Network Exposure Function (NEF) The relation between **NEF** and Network as Code is simple: **NEF** is a **NaC** enabler, it complements the Network-as-Code by providing Mobile as Code. Its main task is to expose information to applications in a reliable and safe way. It does that by abstracting capabilities from your core Network and allowing the creation of innovative services to address the needs of connected industries, smart cities, public safety and enterprises. Click [here](https://www.nokia.com/networks/core-networks/network-exposure-function/) to learn more."}
{"question": "Can I build new APIs using Network as Code?", "answer": "Network as Code (NaC) itself does not provide the functionality to create new APIs from scratch. Instead, it offers SDKs that work on top of existing APIs to provide a more convenient and user-friendly way to interact with them. NaC simplifies network programming and makes it accessible to developers without telecom experience, allowing them to leverage native 5G capabilities through APIs. You can use NaC to request network capabilities, manage devices, control network ratios, and leverage features like location awareness and application telemetry, but the creation of new APIs would be outside the scope of NaC's provided tools.", "ground_truth_answers": "**Network as Code** simplifies network programming and makes it accessible to developers without telecom experience, so they can call APIs with native 5G capabilities in an easier and less time-consuming way. Beyond calling APIs, NaC provides simple SDK code that will abstract network capabilities in intelligent ways under a few minutes. However, an SDK is not a standalone solution for creating an API from scratch. It's important to point out that the Network-as-Code SDKs work on top of existing APIs to provide a more convenient and user-friendly way to interact with them."}
{"question": "What is the difference between Specialized Networks (slices) and Quality-of-service-on-Demand sessions? If there is no difference, just say they are the same thing, but if there is a difference, explain it.", "answer": "Specialized Networks (often referred to as slices) and Quality-of-service on Demand (QoD) sessions are different concepts within the context of programmable networks, and they serve different purposes.  **Specialized Networks (Slices):** - A slice is a customizable part of a larger network that can be tailored to meet the needs of specific use cases, such as business applications, streaming, or gaming events. - Slices ensure the logical separation and efficient use of network resources according to current demand. - They are created by partitioning the network infrastructure to enable different virtual network instances. - Each slice can have its own network performance guarantees and can be associated with specific devices or applications. - Slices are generally long-lived and are used to reserve parts of the 5G network for specialized use-case scenarios.  **Quality-of-service on Demand (QoD) Sessions:** - A QoD session is a temporary configuration that instructs the network on how to handle traffic for a particular device or service. - QoD sessions can be used to prioritize bandwidth or latency for a device, ensuring higher-quality and stable bandwidth use for the duration of the session. - These sessions are active until the application terminates them or they expire after a maximum of 24 hours. - QoD sessions are typically used for short-term adjustments to network behavior to accommodate specific service needs at a given time.  In summary, while both slices and QoD sessions are tools for managing network resources and ensuring quality of service, slices are more about long-term, structural network customization for different types of services, and QoD sessions are about short-term, dynamic adjustments to network performance for specific devices or services.", "ground_truth_answers": "# Specialized Networks  Network as Code offers easy-to-use SDKs to control Specialized Networks and adapt the 5G network to a myriad of use cases. With Specialized Networks, you can ensure the logical separation and efficient use of network resources according to your current demand.  Think of a Slice (or specialized network) as a customizable part of a much larger network. Now, imagine you can change this specialized portion to meet the needs of each specific use-case. Let's say, when you need reliable connection for your business, streaming, gaming event or the endless possibilities a slice can be created for. Any time you need, at your own demand, a slice can be created to offer tailored network flexibility, speeds and capacities to suit different needs.  Behind this technology, there is a lot of complexity that our SDK code abstracts for you. Like the partitioning of the network infrastructure, which enables the creation of different virtual network instances. The Specialized Networks SDK makes the link between the Network Operator and different devices or applications. So, you can allocate network resources to a given slice or unique QoD session that will guarantee network performance. While also being able to associate specific devices or applications with a particular network slice.  # Quality-of-service on Demand (QoD)  The QoD feature allows establishing prioritized connections between your mobile device and another device or service on the internet.  It allows you to manage the amount of stable bandwidth (connection speed) and the latency (message delay) of network connections for each device, according to your current demand. This prioritized connection flow is established through what we call \"QoD sessions\".  ## What is Quality of Service (QoS)?  This is the technology underpinning QoD. Oftentimes, predictable network performance can be difficult to achieve when there's heavy network traffic, over wide area network (WAN) connections, especially for applications or devices that will require a lot from the network. QoS is then used to manage and prioritize the flow of data over a network.  For instance, when prioritizing critical services like Voice over IP (VoIP), video streaming or latency-sensitive applications, it is important to ensure that different traffic types receive preferential or specific treatment, according to demand. So, by managing bandwidth, latency and balancing the network, QoS empowers a more consistent and reliable user experience! "}
{"question": "How can I find out the device ID of an enterprise-owned drone?", "answer": "To find out the device ID of an enterprise-owned drone, you would typically refer to the documentation or management interface provided by the drone manufacturer or the mobile network operator that the drone is registered with. The device ID can  be a phone number associated with the drone's SIM card or an email-like identifier specific to the network.  If the drone is to be used with Nokia Network as Code (NaC), you would need to have access to the enterprise's device management system or the NaC portal where such identifiers are listed. In the context of NaC, a `Device` object can be created to represent the drone's network identity, and this object would use the device ID as a key parameter.  If you are an admin or have the necessary permissions within the enterprise, you can check the drone's device ID by looking at the enterprise's inventory or device management system. If the drone is already registered with NaC, you can find the device ID in the NaC Portal under the \"Devices\" section or by querying the NaC APIs if you have the appropriate access and authorization.  Remember that proper authorization and consent are required to access and manage device IDs, especially in a business context, to comply with privacy and data protection regulations.", "ground_truth_answers": "That is why the Device ID (also referred to as External Identifier or Network Access Identifier, e.g.: `device@testcsp.net`) can work as an alternate.  In Business to Business (B2B) scenarios, the enterprise owns mobile subscriptions for the devices, and they obtain it from the Network Operator. So, they would know their Device IDs. Enterprises should provide the Device ID related information so that their applications can use them to identify the devices on the mobile network. "}
{"question": "Can you provide an example of attaching a device to a slice using an SDK?", "answer": "Certainly! Here's an example of how you can attach a device to a network slice using the Network as Code SDK in Python:  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import DeviceIpv4Addr from network_as_code.models.slice import (     NetworkIdentifier,     Slice,     SliceInfo,     AreaOfService,     Point,     Throughput )  # Initialize the NetworkAsCode client client = NetworkAsCodeClient(...)  # Retrieve the device you want to attach device = client.devices.get(...)  # Retrieve the slice to which you want to attach the device slice = client.slices.create(...)  # Attach the device to the slice slice.attach(     device,     \"https://example.org/notify\",     notification_auth_token=\"replace-with-your-auth-token\" ) ```  In this example, you need to replace the ellipsis (`...`) with the appropriate values for your setup:  - Replace the ellipsis in `NetworkAsCodeClient(...)` with the necessary initialization parameters for the client, such as your API token. - Replace the ellipsis in `client.devices.get(...)` with the parameters to identify the device you want to attach. - Replace the ellipsis in `client.slices.create(...)` with the parameters to identify the slice to which you want to attach the device. - Replace `\"https://example.org/notify\"` with your actual notification URL where you want to receive status updates about the attachment process. - Replace `\"replace-with-your-auth-token\"` with your actual notification authentication token.  Please ensure that you have the necessary permissions and that the slice is already created and activated before attempting to attach a device to it.", "ground_truth_answers": "## Attaching a device to a slice  Device attachment presupposes a slice already exists and that it is active. Learn how to activate a slice [here](/docs/slicing/slice-activate-deactivate#activating-a-slice). So, after creating and activating the desired slice according to the steps in the [previous page](/docs/slicing/slice-creation), simply use the `slice.attach()` method to attach a device.  ```python from network_as_code.client import NetworkAsCodeClient  from network_as_code.models.device import DeviceIpv4Addr  from network_as_code.models.slice import(     NetworkIdentifier,     Slice,     SliceInfo,     AreaOfService,     Point,     Throughput )  device = client.devices.get(...)  slice = client.slices.create(...)  slice.attach(     device,     \"https://example.org/notify\",     notification_auth_token=\"replace-with-your-auth-token\" ) ```"}
{"question": "What method do I use to activate a slice?", "answer": "To activate a network slice using Nokia's Network as Code SDK, you would use the `slice.activate()` method. Here is an example snippet showing how to activate a slice:  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.slice import Slice  # Assuming 'client' is already created and you have the slice ID slice_id = \"your_slice_id\"  # Replace with your actual slice ID slice = client.slices.get(slice_id)  # Then, activate it slice.activate() ```  Please ensure that the slice exists and is not already active before attempting to activate it.", "ground_truth_answers": "## Activating a slice  Slice activation presupposes a slice already exists. So, after creating the desired slice according to the steps in the [previous page](/docs/slicing/slice-creation), simply use the `client.slices.activate()` method to activate the slice.  ```python from network_as_code.client import NetworkAsCodeClient  from network_as_code.models.device import DeviceIpv4Addr  from network_as_code.models.slice import(     NetworkIdentifier,     Slice,     SliceInfo,     AreaOfService,     Point,     Throughput )  device = client.devices.get(...)  # First, create or get a slice my_slice = client.slices.create(...)  # Get a slice by its ID slice = client.slices.get(my_slice.name)  # Then, activate it slice.activate() ```  > **NOTE:** A slice might take a significant amount of time (minutes) to be set up. > So, you can [configure a web server](/docs/slicing/slice-notifications) > to receive to receive slice-status notifications. > This will allow you to know when a slice is ready to be configured as desired."}
{"question": "What are the ways I can get a device's IPv4 or IPv6 addresses in B2B scenarios?", "answer": "In Business to Business (B2B) scenarios, obtaining a device's IPv4 or IPv6 addresses typically involves coordination with the enterprise that owns the mobile subscriptions for the devices, as well as the Network Operator from whom they obtain these subscriptions. Here are the ways you can get a device’s IP addresses in B2B scenarios:  1. **From the Network Operator**: The enterprise that owns the mobile subscriptions usually has a relationship with the Network Operator. They can obtain the IP address information directly from the operator, as the operator assigns these addresses to the devices on their network.  2. **From the Device Itself**: If the enterprise has direct access to the device, the device can be programmed to report its current IP address(es) to a central management system or operations center. This is particularly useful for dynamic IP addresses, which can change over time.  3. **Via DNS or Other Network Services**: IP address information can sometimes be obtained from Domain Name System (DNS) servers or other network services that the device communicates with.  4. **Through Network as Code (NaC) APIs**: If the enterprise is using Nokia's Network as Code platform, they can programmatically access device information, including IP addresses, through NaC APIs. The `DeviceIPv4Addr` model within the NaC SDK allows specifying IPv4 and IPv6 addresses to uniquely identify devices for programming mobile network features.  It's important to note that IP addresses are considered sensitive information, and appropriate measures should be taken to ensure that access to this information is secure and authorized. Additionally, querying a device's IP address might have privacy implications, so it should be done in compliance with relevant regulations and with the necessary consent.", "ground_truth_answers": "IP Addresses are dynamic. So, they are difficult to identify in advance. Whoever owns the IoT device will need to implement a way for it to tell its current IP address(es). Let's suppose you or a client owns a business that manages flying drones. Then, you (or the client) would have an operations center to manage/control these drones. They would need to connect to this operations center whenever they were on and send their connection details with current IP address(es)."}
{"question": "Document in GitHub-flavored markdown the following Python SDK snippet, delimited by triple hash signs ### and instruct a developer how to use it and what it does. Explain how they can find the necessary information to fill in the details for their applications, OS and attach their application to slices. Also include a parameter table with 2 columns labeled as follows: 'Parameters' and 'Description'. Then, add the rows listing down the attachment parameters and a brief description of each of them below your code snippets and documentation: ###from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo) my_slice = client.slices.create(...) my_slice.activate() my_slice.attach(device, traffic_categories=TrafficCategories(apps=Apps(os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\", apps=[\"ENTERPRISE\", \"ENTERPRISE2\"])))###.", "answer": "```markdown # Network as Code Slice Attachment  The following Python SDK snippet is used to create, activate, and attach an application to a network slice using Nokia's Network as Code (NaC) platform. This allows developers to programmatically manage network slices and attach applications with specific traffic categories to them.  ## SDK Snippet  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo )  # Initialize the Network as Code client client = NetworkAsCodeClient(...)  # Create a network slice with the desired configuration my_slice = client.slices.create(...)  # Activate the newly created slice my_slice.activate()  # Attach your application to the slice with specific traffic categories my_slice.attach(     device,     traffic_categories=TrafficCategories(         apps=Apps(             os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\",             apps=[ENTERPRISE, ENTERPRISE2]         )     ) ) ```  ## Usage Instructions  To use this snippet, you will need to:  1. Install the Network as Code SDK and authenticate with your credentials. 2. Initialize the `NetworkAsCodeClient` with the necessary authentication details. 3. Create a slice by providing the required parameters to the `client.slices.create(...)` method. 4. Activate the slice using the `my_slice.activate()` method. 5. Attach your application to the slice by calling `my_slice.attach(...)` with the appropriate device and traffic categories.  For detailed information on how to fill in the necessary parameters for your applications, OS, and to attach your application to slices, you can refer to the official Network as Code documentation. This will provide you with the necessary details to configure your slices and applications correctly.  ## Parameter Table  | Parameters            | Description                                                                 | |-----------------------|-----------------------------------------------------------------------------| | `device`              | The device object representing the network device to be attached to the slice. | | `traffic_categories`  | An object specifying the traffic categories for the applications to be attached. | | `apps`                | The `Apps` object within `traffic_categories` that contains the OS identifier and a list of applications. | | `os`                  | The unique identifier for the operating system used by the applications.    | | `apps` (within `Apps`)| A list of application identifiers that specify which applications are to be attached to the slice. |  Remember to replace placeholder values (e.g., `...`, `ENTERPRISE`, `ENTERPRISE2`) with actual data relevant to your application and network configuration. ```  Note: The above documentation is written in GitHub-flavored markdown and can be included in a GitHub repository's README or other markdown documents. It provides a basic guide for developers on how to use the provided SDK snippet to attach an application to a network slice using Nokia's Network as Code platform.", "ground_truth_answers": "--- tags: application attachment, network slice application attachment, specialized network application attachment desc: Learn how to attach or detach an application from a Network as Code slice ---  # Attaching and detaching applications  Besides [attaching](/docs/slicing/attach-detach) a device to a network slice as whole, you can attach specific applications instead. Application attachment enables fine-grained slice control with different connectivity parameters set for different applications on a device.  **What does this mean?** When you [create](/docs/slicing/slice-creation) a network slice with specific connectivity parameters, such as different amounts of bandwidth a device or slice can get, area of service, etc., you can make sure that only specific applications can access these resources.  This is done by attaching both the device and applications to the slice you just created. Then, when you are done, you can detach them in the same way.  For example, if an enterprise is authorized to use a device and create network slices for it, they can also attach specific applications to them. This way, they can prioritize network resources according to their multiple business applications.  > **NOTE:** Before attaching an enterprise app into a slice, > make sure the enterprise has the right consent to access the device and create specialized network (slices) for it. > Learn how to do it in our [Consent & Identity management policy](/docs/general-concepts/consent-identity-mgmt).  ## Attaching an application to a slice  If you have already [created](/docs/slicing/slice-creation) and [activated](/docs/slicing/slice-activate-deactivate#activating-a-slice) a slice, you can just attach a specific application to it by following this SDK example:  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr  from network_as_code.models.slice import (     Apps,     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput,     TrafficCategories ) ... # The slice needs to be created and activated my_slice.activate()  attachment = my_slice.attach(     device,     # Use HTTPS to send notifications     # about slice attachments.     notification_url=\"https://notify.me/here\",     notification_auth_token=\"replace-with-your-auth-token\",     traffic_categories=TrafficCategories(         apps=Apps(             # This is the OS ID used by Android             os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\",             apps=[\"ENTERPRISE\", \"ENTERPRISE2\"]         )     ) ) ```  ### What's behind this technology?  There's a set of rules, which will enable the User Equipment (UE) to know how to route the traffic to specific applications within the network environment. On the network side, Network as Code will configure these UE Route Selection Policy (URSP) rules according to the Operating System Identifier (OSId) and OS specific Application Identifier (OsAppId) to establish the traffic categories. So, all you will need to provide is the `OSId`, according to the OS you use (Android, iOS, etc.) and the `OsAppId` (Enterprise app name).  For example, [Android's 5G Network Slicing documentation](https://source.android.com/docs/core/connect/5g-slicing) defines their `OSId` with a 5 (UUID) sequence, which is `97a498e3-fc92-5c94-8986-0333d06e4e47`. You can also refer to the [iOS documentation](https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_networking_slicing_trafficcategory) for further information on their `OSId`. Now, for the `OsAppId`, you will need to pass the enterprise app name.  ## Detaching an application from a slice  You can follow the complete steps on how to [detach a device from a slice](/docs/slicing/attach-detach#detaching-a-device-from-a-slice), since it also works for application attachments. Briefly, here is a snippet which summarizes the process of detaching and deleting an application:  ```python # Detach a device my_slice.detach(device)  # Delete an attachment by calling the method # on the attachment previously created attachment.delete()  # Deactivate and delete a slice my_slice.deactivate() my_slice.delete() ```  ### Attachment parameters  The attach/detachment methods have the following parameters:  `traffic_categories` is an optional parameter in the format \"[OS]/[Category]\", which is converted by NaC backend into an OSId and OSAppId according to URSP rules. If this parameter is omitted, the slice will be attached as a default for the device. Otherwise, the slice will be only used for the mentioned traffic categories.  |      **Parameters**       | **Description**                                                                                                                 | | :-----------------------: | ------------------------------------------------------------------------------------------------------------------------------- | |         `device`          | Device ID callback parameter used to perform attachment/detachment                                                              | |   `traffic_categories`    | (Optional) It should contain the `OSId`, according to the OS you use (Android, iOS, etc.) and the `OsAppId` (Enterprise app name) | |          `apps`           | The enterprise app name (ID)                                                                                                    | |           `os`            | The **OSId** identifier according to the OS you use (Android, iOS, etc.)                                                        | |    `notification_url`     | (Optional) The recipient's `HTTP` endpoint, which is a web server configured to receive `POST` requests.                        | | `notification_auth_token` | The password used to identify the sender of the notification.                                                                   | |           `id`            | It's possible to define an identifier for the attachment and use it to get the resource.                                        |"}
{"question": "Document in GitHub-flavored markdown the following Python SDK snippet, delimited by triple hash signs ###, and instruct a developer how to use it and what it does. Explain how they can find the necessary information to get a slice and modify it. Also include a parameter table with 2 columns labeled as follows: 'Parameters' and 'Description'. Then, add the rows listing down the attachment parameters and a brief description of each of them below your code snippets and documentation: ###import network_as_code as nac from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo, Throughput) client = nac.NetworkAsCodeClient(...) # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\") # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(max_data_connections = 12, max_devices = 3, slice_downlink_throughput=Throughput(guaranteed=10, maximum=10), slice_uplink_throughput=Throughput(guaranteed=10, maximum=10), device_downlink_throughput=Throughput(guaranteed=10, maximum=10), device_uplink_throughput=Throughput(guaranteed=10, maximum=10))###.", "answer": "```markdown # Modifying a Network Slice using Nokia Network as Code SDK  The following Python SDK snippet demonstrates how to modify an existing network slice using the Nokia Network as Code (NaC) SDK. This example assumes that you have already set up the NaC client and have the necessary permissions to modify network slices.  ```python import network_as_code as nac from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput )  # Initialize the Network as Code client client = nac.NetworkAsCodeClient(...)  # Get the slice you want to modify by providing its name slice = client.slices.get('slice-name_1')  # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configured ones. slice.modify(     max_data_connections=12,     max_devices=3,     slice_downlink_throughput=Throughput(guaranteed=10, maximum=10),     slice_uplink_throughput=Throughput(guaranteed=10, maximum=10),     device_downlink_throughput=Throughput(guaranteed=10, maximum=10),     device_uplink_throughput=Throughput(guaranteed=10, maximum=10) ) ```  ## How to Use  To modify a network slice:  1. Initialize the NaC client with the appropriate credentials and endpoint. 2. Retrieve the slice object by calling `client.slices.get()` with the name of the slice you want to modify. 3. Call the `modify()` method on the slice object with the new parameters you want to set. It is important to note that all parameters you wish to change must be provided again, as the `modify()` method does not retain any previously set parameters.  ## Finding Necessary Information  To get the necessary information for modifying a slice, you can refer to the documentation provided by Nokia Network as Code. This includes details on how to create a client, identify devices, and understand the parameters for slice creation and  modification.  ## Parameter Table  | Parameters                 | Description                                                                 | |----------------------------|-----------------------------------------------------------------------------| | `max_data_connections`     | The maximum number of data connection sessions allowed in the slice.        | | `max_devices`              | The maximum number of devices that can be attached to the slice.            | | `slice_downlink_throughput`| The guaranteed and maximum downlink throughput for the slice.                | | `slice_uplink_throughput`  | The guaranteed and maximum uplink throughput for the slice.                  | | `device_downlink_throughput`| The guaranteed and maximum downlink throughput for each device in the slice.| | `device_uplink_throughput` | The guaranteed and maximum uplink throughput for each device in the slice.  |  Note: The `Throughput` parameters require two sub-parameters: `guaranteed` and `maximum`, which define the minimum guaranteed and maximum possible throughput values, respectively. ```  This markdown documentation provides a clear guide for developers on how to use the provided SDK snippet to modify a network slice. It includes an explanation of the process, how to find necessary information, and a detailed parameter table for reference.", "ground_truth_answers": "--- tags: network slice modification, slice modification, modifying a specialized network, modifying a slice desc: Learn how to modify a network slice ---  # Modifying slices  You can modify the parameters for an existing slice with the `modify()` method.  ## Modifying a slice  In the following SDK snippet, first we [get](/docs/slicing/get-slice) an existing slice that we need to modify. Next, we modify some slice parameters, such as `slice throughput`, `maximum number of data connections` and `devices`. So, we use the `modify()` method to make these changes. Learn more about the parameters that can be modified [below](/docs/slicing/modify-slices#slice-parameters).  ```python import network_as_code as nac from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput )  client = nac.NetworkAsCodeClient(...)  # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\")  # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(     max_data_connections = 12,     max_devices = 3,     slice_downlink_throughput=Throughput(guaranteed=10, maximum=10),     slice_uplink_throughput=Throughput(guaranteed=10, maximum=10),     device_downlink_throughput=Throughput(guaranteed=10, maximum=10),     device_uplink_throughput=Throughput(guaranteed=10, maximum=10) ) ```  ### Slice parameters  These are the slice parameters that can be modified using the `modify()` method and a brief description of them.  |                      **Parameters**                       | **Description**                                          | | :-------------------------------------------------------: | -------------------------------------------------------- | | `slice_uplink_throughput` or `slice_downlink_throughput`  | Specify the amount of bandwidth the slice can get.       | | `device_uplink_throughput` or `device_downlink_throughput` | Specify the amount of bandwidth the device can get.     | |                  `max_data_connections`                   | Maximum number of data connection sessions in the slice. | |                       `max_devices`                       | Maximum number of devices in the slice.                  |  #### What is a notification URL?  [Learn more](/docs/general-concepts/notification-url) about the notification URL/auth token and how to create a web server for them.  > **Note that** the snippets above assume > you have already created a slice before, > which you can learn how to do [here](/docs/slicing/creation). > It also implies that you have already created a [Network-as-Code client](/docs/general-concepts/network-as-code-client) > and [identified your mobile network device](/docs/general-concepts/identifying-devices#identifying-devices-by-ip-address-and-port)."}
{"question": "Document in GitHub-flavored markdown the following Python SDK snippet, delimited by triple hash signs ### and instruct a developer how to use it and what it does. Include a short explanation of about 7 lines total on what is behind the most relevant some concepts so a user can get a gist of it before using the code. Explain how they can find the necessary information to fill in the details for their applications, OS and attach their application to slices. Also include a parameter table with 2 columns labeled as follows: 'Parameters' and 'Description'. Then, add the rows listing down the attachment parameters and a brief description of each of them below your code snippets and documentation. Remember to order the headings accordingly and provide metadata in your markdown following the same pattern as your knowledge sources. Here is the snippet to be documented: ###from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo) my_slice = client.slices.create(...) my_slice.activate() my_slice.attach(device, traffic_categories=TrafficCategories(apps=Apps(os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\", apps=[\"ENTERPRISE\", \"ENTERPRISE2\"])))###.", "answer": "--- tags: slice activation, slice attachment, network slice, Network as Code desc: Instructions on how to activate and attach a device to a network slice using Nokia's Network as Code Python SDK. ---  # Activating and Attaching a Device to a Network Slice  ## Overview  Nokia's Network as Code (NaC) enables developers to programmatically manage and interact with 5G network slices. A network slice is a separate, virtualized instance of the network that can be tailored to meet the specific needs of an application or service. By using NaC, developers can activate slices and attach devices to them, ensuring that the application's requirements for connectivity, bandwidth, and latency are met.  The Python SDK snippet below demonstrates how to activate a network slice and attach a device to it. This process involves creating a slice object, activating it, and then attaching a device with specific traffic categories. Before using the code, developers need to gather the necessary information such as the network identifiers, slice information, and device details. This information can typically be found in the network's documentation or obtained from the network administrator.  ## Python SDK Snippet  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo )  # Initialize the Network as Code client client = NetworkAsCodeClient(...)  # Create a slice object with the required parameters my_slice = client.slices.create(...)  # Activate the slice my_slice.activate()  # Attach a device to the slice with specific traffic categories device = client.devices.get(...) my_slice.attach(     device,     traffic_categories=TrafficCategories(         apps=Apps(             os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\",             apps=[ENTERPRISE, ENTERPRISE2]         )     ) ) ```  ## Parameters  | Parameters            | Description                                                                                     | |-----------------------|-------------------------------------------------------------------------------------------------| | `client`              | The Network as Code client instance used to interact with the network.                          | | `my_slice`            | The slice object representing the network slice to be activated and used.                       | | `device`              | The device object that needs to be attached to the slice.                                       | | `traffic_categories`  | The traffic categories to be used for the device, specifying the type of applications attached. | | `apps`                | The applications object containing the operating system identifier and the list of applications. | | `os`                  | The unique identifier for the operating system used by the applications.                        | | `apps` (list)         | A list of application identifiers that specify the types of traffic for the device.             |  ## Using the Snippet  1. Replace the ellipsis (`...`) in `NetworkAsCodeClient(...)` with the necessary initialization parameters for your client. 2. Fill in the ellipsis in `client.slices.create(...)` with the required slice parameters such as name, network identifier, and slice information. 3. Use `client.devices.get(...)` to retrieve the device object that you want to attach to the slice. 4. Specify the operating system identifier and the list of applications for the `traffic_categories` parameter. 5. Execute the snippet to activate the slice and attach the device with the specified traffic categories.  For more detailed information on creating a client, identifying devices, and managing slices, refer to the Network as Code documentation.", "ground_truth_answers": "--- tags: application attachment, network slice application attachment, specialized network application attachment desc: Learn how to attach or detach an application from a Network as Code slice ---  # Attaching and detaching applications  Besides [attaching](/docs/slicing/attach-detach) a device to a network slice as whole, you can attach specific applications instead. Application attachment enables fine-grained slice control with different connectivity parameters set for different applications on a device.  **What does this mean?** When you [create](/docs/slicing/slice-creation) a network slice with specific connectivity parameters, such as different amounts of bandwidth a device or slice can get, area of service, etc., you can make sure that only specific applications can access these resources.  This is done by attaching both the device and applications to the slice you just created. Then, when you are done, you can detach them in the same way.  For example, if an enterprise is authorized to use a device and create network slices for it, they can also attach specific applications to them. This way, they can prioritize network resources according to their multiple business applications.  > **NOTE:** Before attaching an enterprise app into a slice, > make sure the enterprise has the right consent to access the device and create specialized network (slices) for it. > Learn how to do it in our [Consent & Identity management policy](/docs/general-concepts/consent-identity-mgmt).  ## Attaching an application to a slice  If you have already [created](/docs/slicing/slice-creation) and [activated](/docs/slicing/slice-activate-deactivate#activating-a-slice) a slice, you can just attach a specific application to it by following this SDK example:  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr  from network_as_code.models.slice import (     Apps,     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput,     TrafficCategories ) ... # The slice needs to be created and activated my_slice.activate()  attachment = my_slice.attach(     device,     # Use HTTPS to send notifications     # about slice attachments.     notification_url=\"https://notify.me/here\",     notification_auth_token=\"replace-with-your-auth-token\",     traffic_categories=TrafficCategories(         apps=Apps(             # This is the OS ID used by Android             os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\",             apps=[\"ENTERPRISE\", \"ENTERPRISE2\"]         )     ) ) ```  ### What's behind this technology?  There's a set of rules, which will enable the User Equipment (UE) to know how to route the traffic to specific applications within the network environment. On the network side, Network as Code will configure these UE Route Selection Policy (URSP) rules according to the Operating System Identifier (OSId) and OS specific Application Identifier (OsAppId) to establish the traffic categories. So, all you will need to provide is the `OSId`, according to the OS you use (Android, iOS, etc.) and the `OsAppId` (Enterprise app name).  For example, [Android's 5G Network Slicing documentation](https://source.android.com/docs/core/connect/5g-slicing) defines their `OSId` with a 5 (UUID) sequence, which is `97a498e3-fc92-5c94-8986-0333d06e4e47`. You can also refer to the [iOS documentation](https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_networking_slicing_trafficcategory) for further information on their `OSId`. Now, for the `OsAppId`, you will need to pass the enterprise app name.  ## Detaching an application from a slice  You can follow the complete steps on how to [detach a device from a slice](/docs/slicing/attach-detach#detaching-a-device-from-a-slice), since it also works for application attachments. Briefly, here is a snippet which summarizes the process of detaching and deleting an application:  ```python # Detach a device my_slice.detach(device)  # Delete an attachment by calling the method # on the attachment previously created attachment.delete()  # Deactivate and delete a slice my_slice.deactivate() my_slice.delete() ```  ### Attachment parameters  The attach/detachment methods have the following parameters:  `traffic_categories` is an optional parameter in the format \"[OS]/[Category]\", which is converted by NaC backend into an OSId and OSAppId according to URSP rules. If this parameter is omitted, the slice will be attached as a default for the device. Otherwise, the slice will be only used for the mentioned traffic categories.  |      **Parameters**       | **Description**                                                                                                                 | | :-----------------------: | ------------------------------------------------------------------------------------------------------------------------------- | |         `device`          | Device ID callback parameter used to perform attachment/detachment                                                              | |   `traffic_categories`    | (Optional) It should contain the `OSId`, according to the OS you use (Android, iOS, etc.) and the `OsAppId` (Enterprise app name) | |          `apps`           | The enterprise app name (ID)                                                                                                    | |           `os`            | The **OSId** identifier according to the OS you use (Android, iOS, etc.)                                                        | |    `notification_url`     | (Optional) The recipient's `HTTP` endpoint, which is a web server configured to receive `POST` requests.                        | | `notification_auth_token` | The password used to identify the sender of the notification.                                                                   | |           `id`            | It's possible to define an identifier for the attachment and use it to get the resource.                                        |"}
{"question": "Document in GitHub-flavored markdown the following Python SDK snippet, delimited by triple hash signs ###, and instruct a developer how to use it and what it does. Include a short explanation of about 7 lines total on what is behind the most relevant some concepts so a user can get a gist of it before using the code.  Explain how they can find the necessary information to get a slice and modify it. Also include a parameter table with 2 columns labeled as follows: 'Parameters' and 'Description'. Then, add the rows listing down the attachment parameters and a brief description of each of them below your code snippets and documentation. Remember to order the headings accordingly and provide metadata in your markdown following the same pattern as your knowledge sources. Here is the snippet to be documented: ###import network_as_code as nac from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo, Throughput) client = nac.NetworkAsCodeClient(...) # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\") # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(max_data_connections = 12, max_devices = 3, slice_downlink_throughput=Throughput(guaranteed=10, maximum=10), slice_uplink_throughput=Throughput(guaranteed=10, maximum=10), device_downlink_throughput=Throughput(guaranteed=10, maximum=10), device_uplink_throughput=Throughput(guaranteed=10, maximum=10))###.", "answer": "```markdown --- tags: network slice modification, modify a network slice, network slice parameters desc: Guide on how to modify a network slice using the Network as Code Python SDK ---  # Modifying a Network Slice  ## Overview  Network as Code (NaC) enables developers to programmatically manage and adapt network slices to specific application requirements. A network slice is a virtual network that provides tailored connectivity services for diverse types of traffic. NaC abstracts complex network functionalities into simple API calls, allowing even those without deep telecom knowledge to manipulate 5G network capabilities.  This guide explains how to modify an existing network slice using the NaC Python SDK. Before using the code, ensure you have the necessary permissions and the slice's name you wish to modify.  ## Prerequisites  - NaC Python SDK installed - Authentication with the NaC service - Name of the slice to be modified  ## Modifying a Slice  To modify a slice, use the `modify()` method on a slice object. This method requires you to reconfigure all parameters you wish to change, as it does not preserve previously configured ones.  ```python import network_as_code as nac from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput )  client = nac.NetworkAsCodeClient(...)  # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\")  # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(     max_data_connections = 12,     max_devices = 3,     slice_downlink_throughput=Throughput(guaranteed=10, maximum=10),     slice_uplink_throughput=Throughput(guaranteed=10, maximum=10),     device_downlink_throughput=Throughput(guaranteed=10, maximum=10),     device_uplink_throughput=Throughput(guaranteed=10, maximum=10) ) ```  ## Parameters  | Parameters                   | Description                                                  | | ---------------------------- | ------------------------------------------------------------ | | `max_data_connections`       | Maximum number of data connection sessions allowed in the slice. | | `max_devices`                | Maximum number of devices that can be attached to the slice. | | `slice_downlink_throughput`  | Throughput object defining the guaranteed and maximum downlink bandwidth for the slice. | | `slice_uplink_throughput`    | Throughput object defining the guaranteed and maximum uplink bandwidth for the slice. | | `device_downlink_throughput` | Throughput object defining the guaranteed and maximum downlink bandwidth for each device. | | `device_uplink_throughput`   | Throughput object defining the guaranteed and maximum uplink bandwidth for each device. |  > **Note:** You can find more information on how to get a slice and the necessary permissions in the [Network Slicing documentation](/docs/slicing/index-slc). ```  This markdown documentation provides a concise yet comprehensive guide for developers to modify network slices using the NaC Python SDK. It includes an overview of network slicing, prerequisites, a step-by-step guide with a  code snippet, and a detailed parameter table.", "ground_truth_answers": "--- tags: network slice modification, slice modification, modifying a specialized network, modifying a slice desc: Learn how to modify a network slice ---  # Modifying slices  You can modify the parameters for an existing slice with the `modify()` method.  ## Modifying a slice  In the following SDK snippet, first we [get](/docs/slicing/get-slice) an existing slice that we need to modify. Next, we modify some slice parameters, such as `slice throughput`, `maximum number of data connections` and `devices`. So, we use the `modify()` method to make these changes. Learn more about the parameters that can be modified [below](/docs/slicing/modify-slices#slice-parameters).  ```python import network_as_code as nac from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput )  client = nac.NetworkAsCodeClient(...)  # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\")  # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(     max_data_connections = 12,     max_devices = 3,     slice_downlink_throughput=Throughput(guaranteed=10, maximum=10),     slice_uplink_throughput=Throughput(guaranteed=10, maximum=10),     device_downlink_throughput=Throughput(guaranteed=10, maximum=10),     device_uplink_throughput=Throughput(guaranteed=10, maximum=10) ) ```  ### Slice parameters  These are the slice parameters that can be modified using the `modify()` method and a brief description of them.  |                      **Parameters**                       | **Description**                                          | | :-------------------------------------------------------: | -------------------------------------------------------- | | `slice_uplink_throughput` or `slice_downlink_throughput`  | Specify the amount of bandwidth the slice can get.       | | `device_uplink_throughput` or `device_downlink_throughput` | Specify the amount of bandwidth the device can get.     | |                  `max_data_connections`                   | Maximum number of data connection sessions in the slice. | |                       `max_devices`                       | Maximum number of devices in the slice.                  |  #### What is a notification URL?  [Learn more](/docs/general-concepts/notification-url) about the notification URL/auth token and how to create a web server for them.  > **Note that** the snippets above assume > you have already created a slice before, > which you can learn how to do [here](/docs/slicing/creation). > It also implies that you have already created a [Network-as-Code client](/docs/general-concepts/network-as-code-client) > and [identified your mobile network device](/docs/general-concepts/identifying-devices#identifying-devices-by-ip-address-and-port)."}
