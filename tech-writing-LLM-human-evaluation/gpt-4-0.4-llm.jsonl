{"question": "What is a 406 error and how can I troubleshoot it?", "answer": "A 406 error occurs when a client sends a request with an `Accept` header specifying a content type that the server cannot process. For example, if the client requests a response in a format other than `JSON`, and the server cannot produce a response in that format, it may return a 406 error.  To troubleshoot a 406 error, you should:  - Check that you have the correct `Accept` header in your request. Ensure it matches the content types supported by the server. - Review the SDK and API documentation to make sure you are using the correct content type for your requests. - If you continue to experience issues, try contacting the Network as Code support team for further assistance at support@networkascode.com. ", "ground_truth_answers": "### 406 bad-acceptable errors This error usually occurs when a client tries to send a requestwith an `Accept` header specifying a content type the server cannot process. For example, if the client requests a response other than `JSON`.Then, the server might not be able to produce an appropriate one through the `Accept` headers.- Check that you have the correct `Accept` header in your request - Review the SDK and API documentation and make sure to use the correct content type - Try contacting our [Network as Code support e-mail address](mailto:support@networkascode.com) for further assistance."}
{"question": "What does Network Exposure Function (NEF) do?", "answer": "The Network Exposure Function (NEF) in the context of Network as Code (NaC) acts as an enabler, complementing NaC by providing what can be thought of as Mobile as Code. NEF's primary role is to safely and reliably expose information from the core network to applications. This abstraction of network capabilities allows for the creation of innovative services tailored to the needs of connected industries, smart cities, public safety, and  enterprises. Essentially, NEF facilitates the interaction between applications and the network, enabling developers to leverage network features and data for their applications.", "ground_truth_answers": "### Network Exposure Function (NEF) The relation between **NEF** and Network as Code is simple: **NEF** is a **NaC** enabler, it complements the Network-as-Code by providing Mobile as Code. Its main task is to expose information to applications in a reliable and safe way. It does that by abstracting capabilities from your core Network and allowing the creation of innovative services to address the needs of connected industries, smart cities, public safety and enterprises. Click [here](https://www.nokia.com/networks/core-networks/network-exposure-function/) to learn more."}
{"question": "Can I build new APIs using Network as Code?", "answer": "Sorry, I don't have information to offer on that topic. However, Network as Code (NaC) provides SDKs that work on top of existing APIs to offer a more convenient and user-friendly way to interact with network capabilities. The NaC platform does not focus on creating new APIs from scratch but rather on enabling developers to leverage existing network functionalities through APIs and SDKs provided by Nokia. If you're looking to integrate  with 5G network capabilities or manage network resources, NaC can help you do that with the existing APIs and tools.", "ground_truth_answers": "**Network as Code** simplifies network programming and makes it accessible to developers without telecom experience, so they can call APIs with native 5G capabilities in an easier and less time-consuming way. Beyond calling APIs, NaC provides simple SDK code that will abstract network capabilities in intelligent ways under a few minutes. However, an SDK is not a standalone solution for creating an API from scratch. It's important to point out that the Network-as-Code SDKs work on top of existing APIs to provide a more convenient and user-friendly way to interact with them."}
{"question": "What is the difference between Specialized Networks (slices) and Quality-of-service-on-Demand sessions? If there is no difference, just say they are the same thing, but if there is a difference, explain it.", "answer": "Specialized Networks (often referred to as network slices) and Quality-of-service on Demand (QoD) sessions are different concepts within the context of 5G networks, each serving its own purpose.  **Specialized Networks (Slices):** - A slice is a customizable part of the larger 5G network, logically separated to serve specific use cases. - Slices are created to ensure efficient use of network resources according to demand. - They can be tailored for different needs, such as reliable connections for business, streaming, gaming, and more. - Slices involve partitioning the network infrastructure to create different virtual network instances. - They allow for the allocation of network resources to guarantee performance for a given slice or unique Quality of Service (QoS) session. - Slices can be associated with specific devices or applications.  **Quality-of-service on Demand (QoD) Sessions:** - QoD sessions are created to instruct the network on how to prioritize traffic for a particular device or service. - They are used to ensure a higher quality and stable bandwidth for the duration of the session. - QoD sessions can be configured with a notification URL to receive updates about session events. - They can be created with a specific duration, after which they will be terminated, or they can be terminated earlier by the application. - QoD sessions are active until the application terminates them or they reach a maximum duration of 24 hours.  In summary, while both Specialized Networks and QoD sessions are used to manage and optimize network performance, they do so at different levels and for different purposes. Slices are more about the logical separation and customization of the network to cater to broad use cases, while QoD sessions are about managing the quality of service for specific devices or services for a certain period.", "ground_truth_answers": "# Specialized Networks  Network as Code offers easy-to-use SDKs to control Specialized Networks and adapt the 5G network to a myriad of use cases. With Specialized Networks, you can ensure the logical separation and efficient use of network resources according to your current demand.  Think of a Slice (or specialized network) as a customizable part of a much larger network. Now, imagine you can change this specialized portion to meet the needs of each specific use-case. Let's say, when you need reliable connection for your business, streaming, gaming event or the endless possibilities a slice can be created for. Any time you need, at your own demand, a slice can be created to offer tailored network flexibility, speeds and capacities to suit different needs.  Behind this technology, there is a lot of complexity that our SDK code abstracts for you. Like the partitioning of the network infrastructure, which enables the creation of different virtual network instances. The Specialized Networks SDK makes the link between the Network Operator and different devices or applications. So, you can allocate network resources to a given slice or unique QoD session that will guarantee network performance. While also being able to associate specific devices or applications with a particular network slice.  # Quality-of-service on Demand (QoD)  The QoD feature allows establishing prioritized connections between your mobile device and another device or service on the internet.  It allows you to manage the amount of stable bandwidth (connection speed) and the latency (message delay) of network connections for each device, according to your current demand. This prioritized connection flow is established through what we call \"QoD sessions\".  ## What is Quality of Service (QoS)?  This is the technology underpinning QoD. Oftentimes, predictable network performance can be difficult to achieve when there's heavy network traffic, over wide area network (WAN) connections, especially for applications or devices that will require a lot from the network. QoS is then used to manage and prioritize the flow of data over a network.  For instance, when prioritizing critical services like Voice over IP (VoIP), video streaming or latency-sensitive applications, it is important to ensure that different traffic types receive preferential or specific treatment, according to demand. So, by managing bandwidth, latency and balancing the network, QoS empowers a more consistent and reliable user experience! "}
{"question": "How can I find out the device ID of an enterprise-owned drone?", "answer": "To find out the device ID of an enterprise-owned drone, you would typically refer to the documentation or management interface provided by the drone manufacturer or the enterprise's asset management system. The device ID can be an external identifier similar to an email address (e.g., `device@testcsp.net`) or a phone number if the drone is equipped with a mobile network module that allows it to communicate over a cellular network.        If the drone is part of a network managed through Nokia Network as Code (NaC), you can use the NaC SDKs to create a `Device` object, which represents the device's ID. Here's an example of how you might retrieve a device  ID using the NaC SDK:  ```python import network_as_code as nac  client = nac.NetworkAsCodeClient(...)  # Assuming you have a list of devices, you can retrieve their IDs devices = client.devices.list()  for device in devices:     print(f\"Device ID: {device.id}\") ```  In this code snippet, `client.devices.list()` would return a list of devices managed by the NaC platform, and you could iterate over them to print out their IDs. Please note that you would need the appropriate credentials and permissions to access this information through the NaC platform. If you're unsure about the specific details or how to proceed, you should consult with the NaC Administrator or the enterprise's IT department responsible for managing the drones.", "ground_truth_answers": "That is why the Device ID (also referred to as External Identifier or Network Access Identifier, e.g.: `device@testcsp.net`) can work as an alternate.  In Business to Business (B2B) scenarios, the enterprise owns mobile subscriptions for the devices, and they obtain it from the Network Operator. So, they would know their Device IDs. Enterprises should provide the Device ID related information so that their applications can use them to identify the devices on the mobile network. "}
{"question": "Can you provide an example of attaching a device to a slice using an SDK?", "answer": "Certainly! Below is an example of how to attach a device to a network slice using the Network as Code SDK. This example assumes that you have already created and activated a slice, and that you have a Network-as-Code client and a device object ready.  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import DeviceIpv4Addr from network_as_code.models.slice import(     NetworkIdentifier,     Slice,     SliceInfo,     AreaOfService,     Point,     Throughput )  # Initialize the Network-as-Code client with your token client = NetworkAsCodeClient(token=\"<your-application-key-here>\")  # Get the device object using its identifier device = client.devices.get(\"<device-identifier>\")  # Get the slice object using its name or identifier slice = client.slices.get(\"<slice-name>\")  # Attach the device to the slice slice.attach(     device,     \"https://example.org/notify\",     notification_auth_token=\"replace-with-your-auth-token\" ) ```  In this example, replace `<your-application-key-here>` with your actual application key, `<device-identifier>` with the identifier of the device you want to attach, and `<slice-name>` with the name of the slice to which you want to attach the device. The `notification_url` and `notification_auth_token` are used to receive notifications about the status of the attachment operation. Make sure to replace `\"https://example.org/notify\"` and `\"replace-with-your-auth-token\"` with your actual notification endpoint and token.", "ground_truth_answers": "## Attaching a device to a slice  Device attachment presupposes a slice already exists and that it is active. Learn how to activate a slice [here](/docs/slicing/slice-activate-deactivate#activating-a-slice). So, after creating and activating the desired slice according to the steps in the [previous page](/docs/slicing/slice-creation), simply use the `slice.attach()` method to attach a device.  ```python from network_as_code.client import NetworkAsCodeClient  from network_as_code.models.device import DeviceIpv4Addr  from network_as_code.models.slice import(     NetworkIdentifier,     Slice,     SliceInfo,     AreaOfService,     Point,     Throughput )  device = client.devices.get(...)  slice = client.slices.create(...)  slice.attach(     device,     \"https://example.org/notify\",     notification_auth_token=\"replace-with-your-auth-token\" ) ```"}
{"question": "What method do I use to activate a slice?", "answer": "To activate a network slice using Nokia's Network as Code SDK, you should use the `slice.activate()` method. Here is an example of how you can activate a slice:  ```python from network_as_code.client import NetworkAsCodeClient  # Assuming 'client' is already created and you have the slice instance 'my_slice'  # Get a slice by its ID slice = client.slices.get(my_slice.name)  # Then, activate it slice.activate() ```  Remember, before activating the slice, you need to ensure that the slice has already been created." , "ground_truth_answers": "## Activating a slice  Slice activation presupposes a slice already exists. So, after creating the desired slice according to the steps in the [previous page](/docs/slicing/slice-creation), simply use the `client.slices.activate()` method to activate the slice.  ```python from network_as_code.client import NetworkAsCodeClient  from network_as_code.models.device import DeviceIpv4Addr  from network_as_code.models.slice import(     NetworkIdentifier,     Slice,     SliceInfo,     AreaOfService,     Point,     Throughput )  device = client.devices.get(...)  # First, create or get a slice my_slice = client.slices.create(...)  # Get a slice by its ID slice = client.slices.get(my_slice.name)  # Then, activate it slice.activate() ```  > **NOTE:** A slice might take a significant amount of time (minutes) to be set up. > So, you can [configure a web server](/docs/slicing/slice-notifications) > to receive to receive slice-status notifications. > This will allow you to know when a slice is ready to be configured as desired."}
{"question": "What are the ways I can get a device's IPv4 or IPv6 addresses in B2B scenarios?", "answer": "In Business to Business (B2B) scenarios, obtaining a device's IPv4 or IPv6 addresses typically involves coordination with the enterprise that owns the mobile subscriptions for the devices, as well as the Network Operator from whom they obtain these subscriptions. Here are some ways to gather the necessary IP address information for devices:  1. **From the Network Operator**: The enterprise owning the devices usually has a relationship with the Network Operator. They can request the current IP address information for their devices from the operator.  2. **Device Self-Reporting**: If the enterprise has an operations center or a management system for their devices, the devices can be programmed to report their current IP addresses to this center when they connect to the network.  3. **Dynamic DNS (DDNS)**: Enterprises can use DDNS services that update the DNS records as the IP addresses of the devices change. This way, the devices can be reached using a consistent domain name, and the corresponding IP addresses can be resolved through DNS queries.  4. **Via Network as Code (NaC) APIs**: If the enterprise is using Nokia's Network as Code platform, they can programmatically access device information, including IP addresses, through the NaC APIs. The `DeviceIPv4Addr`  model in the NaC SDK allows specifying IPv4 and IPv6 addresses to uniquely identify devices.  It's important to note that IP addresses can be dynamic, especially in mobile networks, so the method of obtaining them may need to account for changes over time. Additionally, any method of retrieving IP addresses should be implemented with consideration for privacy and security, ensuring that proper authorization is in place." , "ground_truth_answers": "IP Addresses are dynamic. So, they are difficult to identify in advance. Whoever owns the IoT device will need to implement a way for it to tell its current IP address(es). Let's suppose you or a client owns a business that manages flying drones. Then, you (or the client) would have an operations center to manage/control these drones. They would need to connect to this operations center whenever they were on and send their connection details with current IP address(es)."}
{"question": "Document in GitHub-flavored markdown the following Python SDK snippet, delimited by triple hash signs ### and instruct a developer how to use it and what it does. Explain how they can find the necessary information to fill in the details for their applications, OS and attach their application to slices. Also include a parameter table with 2 columns labeled as follows: 'Parameters' and 'Description'. Then, add the rows listing down the attachment parameters and a brief description of each of them below your code snippets and documentation: ###from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo) my_slice = client.slices.create(...) my_slice.activate() my_slice.attach(device, traffic_categories=TrafficCategories(apps=Apps(os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\", apps=[\"ENTERPRISE\", \"ENTERPRISE2\"])))###.", "answer": "```markdown # Attaching an Application to a Network Slice  This guide will help you attach your application to a network slice using the Network as Code (NaC) Python SDK. This process involves creating a slice, activating it, and then attaching your application with specific traffic categories.  ## Prerequisites  Before you begin, ensure you have the following:  - NaC SDK installed in your Python environment. - An application key for authenticating with the NaC service. - The unique identifier for your application's operating system (OS). - The names of the applications you want to attach to the slice.  ## SDK Snippet  Below is the Python SDK snippet for attaching an application to a network slice:  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     TrafficCategories,     Apps )  # Initialize the Network as Code client client = NetworkAsCodeClient(token=\"<your-application-key-here>\")  # Create a slice object with the necessary details my_slice = client.slices.create(...)  # Activate the slice my_slice.activate()  # Attach your application to the slice with specified traffic categories my_slice.attach(     device,     traffic_categories=TrafficCategories(         apps=Apps(             os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\",             apps=[ENTERPRISE, ENTERPRISE2]         )     ) ) ```  Replace `<your-application-key-here>` with your actual application key. The `os` parameter should be the unique identifier for your application's OS, and the `apps` list should contain the names of your applications.  ## Finding Necessary Information  To fill in the details for your applications, OS, and attach your application to slices, you will need to:  1. Obtain your application key from the NaC API Management dashboard. 2. Identify your application's OS unique identifier, which is typically provided by the NaC service. 3. List the names of your applications that you want to attach to the slice.  ## Parameter Table  Here's a table describing the parameters used in the `my_slice.attach()` method:  | Parameters            | Description                                                                                      | |-----------------------|--------------------------------------------------------------------------------------------------| | `device`              | The device object representing the mobile network device you want to attach to the slice.        | | `traffic_categories`  | An object specifying the traffic categories for the applications you're attaching to the slice.  | | `apps`                | A list of applications that will be attached to the slice.                                       | | `os`                  | The unique identifier for your application's operating system.                                   |  By following these instructions and using the provided SDK snippet, you can successfully attach your application to a network slice, allowing it to benefit from the tailored network resources and capabilities offered by NaC. ```  Make sure to replace the placeholders and ellipsis (`...`) with the actual values specific to your network slice and application details. The snippet assumes that you have already instantiated a `NetworkAsCodeClient` and have the necessary device and slice information.", "ground_truth_answers": "--- tags: application attachment, network slice application attachment, specialized network application attachment desc: Learn how to attach or detach an application from a Network as Code slice ---  # Attaching and detaching applications  Besides [attaching](/docs/slicing/attach-detach) a device to a network slice as whole, you can attach specific applications instead. Application attachment enables fine-grained slice control with different connectivity parameters set for different applications on a device.  **What does this mean?** When you [create](/docs/slicing/slice-creation) a network slice with specific connectivity parameters, such as different amounts of bandwidth a device or slice can get, area of service, etc., you can make sure that only specific applications can access these resources.  This is done by attaching both the device and applications to the slice you just created. Then, when you are done, you can detach them in the same way.  For example, if an enterprise is authorized to use a device and create network slices for it, they can also attach specific applications to them. This way, they can prioritize network resources according to their multiple business applications.  > **NOTE:** Before attaching an enterprise app into a slice, > make sure the enterprise has the right consent to access the device and create specialized network (slices) for it. > Learn how to do it in our [Consent & Identity management policy](/docs/general-concepts/consent-identity-mgmt).  ## Attaching an application to a slice  If you have already [created](/docs/slicing/slice-creation) and [activated](/docs/slicing/slice-activate-deactivate#activating-a-slice) a slice, you can just attach a specific application to it by following this SDK example:  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr  from network_as_code.models.slice import (     Apps,     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput,     TrafficCategories ) ... # The slice needs to be created and activated my_slice.activate()  attachment = my_slice.attach(     device,     # Use HTTPS to send notifications     # about slice attachments.     notification_url=\"https://notify.me/here\",     notification_auth_token=\"replace-with-your-auth-token\",     traffic_categories=TrafficCategories(         apps=Apps(             # This is the OS ID used by Android             os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\",             apps=[\"ENTERPRISE\", \"ENTERPRISE2\"]         )     ) ) ```  ### What's behind this technology?  There's a set of rules, which will enable the User Equipment (UE) to know how to route the traffic to specific applications within the network environment. On the network side, Network as Code will configure these UE Route Selection Policy (URSP) rules according to the Operating System Identifier (OSId) and OS specific Application Identifier (OsAppId) to establish the traffic categories. So, all you will need to provide is the `OSId`, according to the OS you use (Android, iOS, etc.) and the `OsAppId` (Enterprise app name).  For example, [Android's 5G Network Slicing documentation](https://source.android.com/docs/core/connect/5g-slicing) defines their `OSId` with a 5 (UUID) sequence, which is `97a498e3-fc92-5c94-8986-0333d06e4e47`. You can also refer to the [iOS documentation](https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_networking_slicing_trafficcategory) for further information on their `OSId`. Now, for the `OsAppId`, you will need to pass the enterprise app name.  ## Detaching an application from a slice  You can follow the complete steps on how to [detach a device from a slice](/docs/slicing/attach-detach#detaching-a-device-from-a-slice), since it also works for application attachments. Briefly, here is a snippet which summarizes the process of detaching and deleting an application:  ```python # Detach a device my_slice.detach(device)  # Delete an attachment by calling the method # on the attachment previously created attachment.delete()  # Deactivate and delete a slice my_slice.deactivate() my_slice.delete() ```  ### Attachment parameters  The attach/detachment methods have the following parameters:  `traffic_categories` is an optional parameter in the format \"[OS]/[Category]\", which is converted by NaC backend into an OSId and OSAppId according to URSP rules. If this parameter is omitted, the slice will be attached as a default for the device. Otherwise, the slice will be only used for the mentioned traffic categories.  |      **Parameters**       | **Description**                                                                                                                 | | :-----------------------: | ------------------------------------------------------------------------------------------------------------------------------- | |         `device`          | Device ID callback parameter used to perform attachment/detachment                                                              | |   `traffic_categories`    | (Optional) It should contain the `OSId`, according to the OS you use (Android, iOS, etc.) and the `OsAppId` (Enterprise app name) | |          `apps`           | The enterprise app name (ID)                                                                                                    | |           `os`            | The **OSId** identifier according to the OS you use (Android, iOS, etc.)                                                        | |    `notification_url`     | (Optional) The recipient's `HTTP` endpoint, which is a web server configured to receive `POST` requests.                        | | `notification_auth_token` | The password used to identify the sender of the notification.                                                                   | |           `id`            | It's possible to define an identifier for the attachment and use it to get the resource.                                        |"}
{"question": "Document in GitHub-flavored markdown the following Python SDK snippet, delimited by triple hash signs ###, and instruct a developer how to use it and what it does. Explain how they can find the necessary information to get a slice and modify it. Also include a parameter table with 2 columns labeled as follows: 'Parameters' and 'Description'. Then, add the rows listing down the attachment parameters and a brief description of each of them below your code snippets and documentation: ###import network_as_code as nac from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo, Throughput) client = nac.NetworkAsCodeClient(...) # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\") # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(max_data_connections = 12, max_devices = 3, slice_downlink_throughput=Throughput(guaranteed=10, maximum=10), slice_uplink_throughput=Throughput(guaranteed=10, maximum=10), device_downlink_throughput=Throughput(guaranteed=10, maximum=10), device_uplink_throughput=Throughput(guaranteed=10, maximum=10))###.", "answer": "```markdown # Modifying a Network Slice using Nokia Network as Code SDK  The following Python SDK snippet allows you to modify an existing network slice using the Nokia Network as Code (NaC) platform. This example demonstrates how to update the maximum number of data connections, the maximum number of devices, and the throughput parameters for both the slice and devices.  To use this snippet, you need to have the NaC SDK installed and configured with the necessary credentials to authenticate with your NaC service.  ```python import network_as_code as nac from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput )  # Initialize the Network as Code client client = nac.NetworkAsCodeClient(...)  # Get the slice you want to modify by providing its name slice = client.slices.get('slice-name_1')  # Modify the slice parameters # Note: The modify() method requires you to reconfigure all parameters you wish to change. # It does not preserve any previously configured parameters. slice.modify(     max_data_connections=12,     max_devices=3,     slice_downlink_throughput=Throughput(guaranteed=10, maximum=10),     slice_uplink_throughput=Throughput(guaranteed=10, maximum=10),     device_downlink_throughput=Throughput(guaranteed=10, maximum=10),     device_uplink_throughput=Throughput(guaranteed=10, maximum=10) ) ```  To find the necessary information to get a slice and modify it, you can refer to the NaC documentation or use the SDK's `client.slices.list()` method to retrieve a list of all slices. Once you have the name of the slice you want to modify, you can use the `client.slices.get('slice-name')` method to retrieve it.  ## Parameters  | Parameters                  | Description                                                                 | |-----------------------------|-----------------------------------------------------------------------------| | `max_data_connections`      | The maximum number of data connection sessions allowed in the slice.        | | `max_devices`               | The maximum number of devices that can be attached to the slice.            | | `slice_downlink_throughput` | The throughput parameters for the slice's downlink, specifying guaranteed and maximum bandwidth. | | `slice_uplink_throughput`   | The throughput parameters for the slice's uplink, specifying guaranteed and maximum bandwidth.   | | `device_downlink_throughput`| The throughput parameters for a device's downlink within the slice, specifying guaranteed and maximum bandwidth. | | `device_uplink_throughput`  | The throughput parameters for a device's uplink within the slice, specifying guaranteed and maximum bandwidth.   | ```  Remember to replace the placeholder 'slice-name_1' with the actual name of the slice you intend to modify. The `Throughput` parameters require two arguments: `guaranteed` and `maximum`, which define the minimum and maximum bandwidth in Mbps, respectively. Adjust these values according to the requirements of your network slice.", "ground_truth_answers": "--- tags: network slice modification, slice modification, modifying a specialized network, modifying a slice desc: Learn how to modify a network slice ---  # Modifying slices  You can modify the parameters for an existing slice with the `modify()` method.  ## Modifying a slice  In the following SDK snippet, first we [get](/docs/slicing/get-slice) an existing slice that we need to modify. Next, we modify some slice parameters, such as `slice throughput`, `maximum number of data connections` and `devices`. So, we use the `modify()` method to make these changes. Learn more about the parameters that can be modified [below](/docs/slicing/modify-slices#slice-parameters).  ```python import network_as_code as nac from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput )  client = nac.NetworkAsCodeClient(...)  # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\")  # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(     max_data_connections = 12,     max_devices = 3,     slice_downlink_throughput=Throughput(guaranteed=10, maximum=10),     slice_uplink_throughput=Throughput(guaranteed=10, maximum=10),     device_downlink_throughput=Throughput(guaranteed=10, maximum=10),     device_uplink_throughput=Throughput(guaranteed=10, maximum=10) ) ```  ### Slice parameters  These are the slice parameters that can be modified using the `modify()` method and a brief description of them.  |                      **Parameters**                       | **Description**                                          | | :-------------------------------------------------------: | -------------------------------------------------------- | | `slice_uplink_throughput` or `slice_downlink_throughput`  | Specify the amount of bandwidth the slice can get.       | | `device_uplink_throughput` or `device_downlink_throughput` | Specify the amount of bandwidth the device can get.     | |                  `max_data_connections`                   | Maximum number of data connection sessions in the slice. | |                       `max_devices`                       | Maximum number of devices in the slice.                  |  #### What is a notification URL?  [Learn more](/docs/general-concepts/notification-url) about the notification URL/auth token and how to create a web server for them.  > **Note that** the snippets above assume > you have already created a slice before, > which you can learn how to do [here](/docs/slicing/creation). > It also implies that you have already created a [Network-as-Code client](/docs/general-concepts/network-as-code-client) > and [identified your mobile network device](/docs/general-concepts/identifying-devices#identifying-devices-by-ip-address-and-port)."}
{"question": "Document in GitHub-flavored markdown the following Python SDK snippet, delimited by triple hash signs ### and instruct a developer how to use it and what it does. Include a short explanation of about 7 lines total on what is behind the most relevant some concepts so a user can get a gist of it before using the code. Explain how they can find the necessary information to fill in the details for their applications, OS and attach their application to slices. Also include a parameter table with 2 columns labeled as follows: 'Parameters' and 'Description'. Then, add the rows listing down the attachment parameters and a brief description of each of them below your code snippets and documentation. Remember to order the headings accordingly and provide metadata in your markdown following the same pattern as your knowledge sources. Here is the snippet to be documented: ###from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo) my_slice = client.slices.create(...) my_slice.activate() my_slice.attach(device, traffic_categories=TrafficCategories(apps=Apps(os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\", apps=[\"ENTERPRISE\", \"ENTERPRISE2\"])))###.", "answer": "```markdown --- tags: network slice attachment, slice attachment, network slice attachment parameters desc: Guide on how to attach an application to a network slice using the Nokia Network as Code Python SDK. ---  # Attaching an Application to a Network Slice  ## Overview  Network as Code (NaC) by Nokia allows developers to programmatically manage network slices. A network slice is a separate, isolated, and virtualized network tailored to meet the specific needs of an application or service. This guide explains how to attach an application to a network slice using the Nokia NaC Python SDK.  Before using the code, developers should understand the concepts of network slicing and the role of Traffic Categories. Network slicing in 5G networks enables the creation of multiple virtual networks on top of a common shared physical infrastructure. Traffic Categories are used to classify and manage the type of traffic that is allowed on a slice, ensuring that the network can meet the specific requirements of different applications.  To use this SDK snippet, you need to have the NaC client set up and authenticated. You should also have the necessary information about your application, such as the operating system (OS) identifier and the list of applications you want to attach to the slice.  ## SDK Snippet Usage  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo )  # Initialize the NetworkAsCode client client = NetworkAsCodeClient(...)  # Create a slice object with the necessary parameters my_slice = client.slices.create(...)  # Activate the slice my_slice.activate()  # Attach your application to the slice with specific traffic categories my_slice.attach(     device,     traffic_categories=TrafficCategories(         apps=Apps(             os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\",             apps=[ENTERPRISE, ENTERPRISE2]         )     ) ) ```  To fill in the details for your application, refer to the NaC documentation to find the appropriate OS identifier and application categories. Ensure that your application is compatible with the traffic categories specified when attaching to the slice.  ## Attachment Parameters  | Parameters            | Description                                                                                   | |-----------------------|-----------------------------------------------------------------------------------------------| | `device`              | The device object representing the application to be attached to the slice.                   | | `traffic_categories`  | An object specifying the traffic categories for the application. This includes the OS identifier and a list of application categories. |  Remember to replace `\"97a498e3-fc92-5c94-8986-0333d06e4e47\"` with your application's OS identifier and `[ENTERPRISE, ENTERPRISE2]` with the actual application categories relevant to your use case. ```", "ground_truth_answers": "--- tags: application attachment, network slice application attachment, specialized network application attachment desc: Learn how to attach or detach an application from a Network as Code slice ---  # Attaching and detaching applications  Besides [attaching](/docs/slicing/attach-detach) a device to a network slice as whole, you can attach specific applications instead. Application attachment enables fine-grained slice control with different connectivity parameters set for different applications on a device.  **What does this mean?** When you [create](/docs/slicing/slice-creation) a network slice with specific connectivity parameters, such as different amounts of bandwidth a device or slice can get, area of service, etc., you can make sure that only specific applications can access these resources.  This is done by attaching both the device and applications to the slice you just created. Then, when you are done, you can detach them in the same way.  For example, if an enterprise is authorized to use a device and create network slices for it, they can also attach specific applications to them. This way, they can prioritize network resources according to their multiple business applications.  > **NOTE:** Before attaching an enterprise app into a slice, > make sure the enterprise has the right consent to access the device and create specialized network (slices) for it. > Learn how to do it in our [Consent & Identity management policy](/docs/general-concepts/consent-identity-mgmt).  ## Attaching an application to a slice  If you have already [created](/docs/slicing/slice-creation) and [activated](/docs/slicing/slice-activate-deactivate#activating-a-slice) a slice, you can just attach a specific application to it by following this SDK example:  ```python from network_as_code.client import NetworkAsCodeClient from network_as_code.models.device import Device, DeviceIpv4Addr  from network_as_code.models.slice import (     Apps,     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput,     TrafficCategories ) ... # The slice needs to be created and activated my_slice.activate()  attachment = my_slice.attach(     device,     # Use HTTPS to send notifications     # about slice attachments.     notification_url=\"https://notify.me/here\",     notification_auth_token=\"replace-with-your-auth-token\",     traffic_categories=TrafficCategories(         apps=Apps(             # This is the OS ID used by Android             os=\"97a498e3-fc92-5c94-8986-0333d06e4e47\",             apps=[\"ENTERPRISE\", \"ENTERPRISE2\"]         )     ) ) ```  ### What's behind this technology?  There's a set of rules, which will enable the User Equipment (UE) to know how to route the traffic to specific applications within the network environment. On the network side, Network as Code will configure these UE Route Selection Policy (URSP) rules according to the Operating System Identifier (OSId) and OS specific Application Identifier (OsAppId) to establish the traffic categories. So, all you will need to provide is the `OSId`, according to the OS you use (Android, iOS, etc.) and the `OsAppId` (Enterprise app name).  For example, [Android's 5G Network Slicing documentation](https://source.android.com/docs/core/connect/5g-slicing) defines their `OSId` with a 5 (UUID) sequence, which is `97a498e3-fc92-5c94-8986-0333d06e4e47`. You can also refer to the [iOS documentation](https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_networking_slicing_trafficcategory) for further information on their `OSId`. Now, for the `OsAppId`, you will need to pass the enterprise app name.  ## Detaching an application from a slice  You can follow the complete steps on how to [detach a device from a slice](/docs/slicing/attach-detach#detaching-a-device-from-a-slice), since it also works for application attachments. Briefly, here is a snippet which summarizes the process of detaching and deleting an application:  ```python # Detach a device my_slice.detach(device)  # Delete an attachment by calling the method # on the attachment previously created attachment.delete()  # Deactivate and delete a slice my_slice.deactivate() my_slice.delete() ```  ### Attachment parameters  The attach/detachment methods have the following parameters:  `traffic_categories` is an optional parameter in the format \"[OS]/[Category]\", which is converted by NaC backend into an OSId and OSAppId according to URSP rules. If this parameter is omitted, the slice will be attached as a default for the device. Otherwise, the slice will be only used for the mentioned traffic categories.  |      **Parameters**       | **Description**                                                                                                                 | | :-----------------------: | ------------------------------------------------------------------------------------------------------------------------------- | |         `device`          | Device ID callback parameter used to perform attachment/detachment                                                              | |   `traffic_categories`    | (Optional) It should contain the `OSId`, according to the OS you use (Android, iOS, etc.) and the `OsAppId` (Enterprise app name) | |          `apps`           | The enterprise app name (ID)                                                                                                    | |           `os`            | The **OSId** identifier according to the OS you use (Android, iOS, etc.)                                                        | |    `notification_url`     | (Optional) The recipient's `HTTP` endpoint, which is a web server configured to receive `POST` requests.                        | | `notification_auth_token` | The password used to identify the sender of the notification.                                                                   | |           `id`            | It's possible to define an identifier for the attachment and use it to get the resource.                                        |"}
{"question": "Document in GitHub-flavored markdown the following Python SDK snippet, delimited by triple hash signs ###, and instruct a developer how to use it and what it does. Include a short explanation of about 7 lines total on what is behind the most relevant some concepts so a user can get a gist of it before using the code.  Explain how they can find the necessary information to get a slice and modify it. Also include a parameter table with 2 columns labeled as follows: 'Parameters' and 'Description'. Then, add the rows listing down the attachment parameters and a brief description of each of them below your code snippets and documentation. Remember to order the headings accordingly and provide metadata in your markdown following the same pattern as your knowledge sources. Here is the snippet to be documented: ###import network_as_code as nac from network_as_code.models.slice import (Point, AreaOfService, NetworkIdentifier, Slice, SliceInfo, Throughput) client = nac.NetworkAsCodeClient(...) # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\") # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(max_data_connections = 12, max_devices = 3, slice_downlink_throughput=Throughput(guaranteed=10, maximum=10), slice_uplink_throughput=Throughput(guaranteed=10, maximum=10), device_downlink_throughput=Throughput(guaranteed=10, maximum=10), device_uplink_throughput=Throughput(guaranteed=10, maximum=10))###.", "answer": "```markdown --- tags: network slice modification, modify a network slice, network slice parameters desc: Guide on how to modify an existing Network as Code slice using the Python SDK ---  # Modifying an Existing Network Slice  ## Overview  Network as Code (NaC) by Nokia allows developers to programmatically manage and adapt network slices to meet specific application requirements. A network slice is a separate, isolated network built on top of a shared physical infrastructure, which can be tailored for different services or applications. This enables a more efficient and flexible use of network resources. The Python SDK provided by NaC allows developers to easily modify network slices by adjusting parameters such as data connections, devices, and throughput limits.  Before using the code snippet below, ensure you have the necessary permissions and the `NetworkAsCodeClient` object set up. You will need to know the name of the slice you wish to modify. The `modify()` method requires reconfiguration of all parameters you intend to change, as it does not retain previously configured values.  ## Modifying a Slice  ```python import network_as_code as nac from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput )  client = nac.NetworkAsCodeClient(...)  # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\")  # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(     max_data_connections = 12,     max_devices = 3,     slice_downlink_throughput=Throughput(guaranteed=10, maximum=10),     slice_uplink_throughput=Throughput(guaranteed=10, maximum=10),     device_downlink_throughput=Throughput(guaranteed=10, maximum=10),     device_uplink_throughput=Throughput(guaranteed=10, maximum=10) ) ```  ## Attachment Parameters  | Parameters                  | Description                                                                                   | |-----------------------------|-----------------------------------------------------------------------------------------------| | `max_data_connections`      | The maximum number of data connection sessions allowed within the slice.                      | | `max_devices`               | The maximum number of devices that can be connected to the slice.                             | | `slice_downlink_throughput` | The `Throughput` object defining the guaranteed and maximum downlink bandwidth for the slice. | | `slice_uplink_throughput`   | The `Throughput` object defining the guaranteed and maximum uplink bandwidth for the slice.   | | `device_downlink_throughput`| The `Throughput` object defining the guaranteed and maximum downlink bandwidth per device.    | | `device_uplink_throughput`  | The `Throughput` object defining the guaranteed and maximum uplink bandwidth per device.      |  > **Note:** To find the necessary information to get and modify a slice, refer to the Network as Code documentation on [slice retrieval](/docs/slicing/slice-retrieval) and [slice modification](/docs/slicing/slice-modification). Ensure you have the correct slice name and the required permissions to make changes. ```", "ground_truth_answers": "--- tags: network slice modification, slice modification, modifying a specialized network, modifying a slice desc: Learn how to modify a network slice ---  # Modifying slices  You can modify the parameters for an existing slice with the `modify()` method.  ## Modifying a slice  In the following SDK snippet, first we [get](/docs/slicing/get-slice) an existing slice that we need to modify. Next, we modify some slice parameters, such as `slice throughput`, `maximum number of data connections` and `devices`. So, we use the `modify()` method to make these changes. Learn more about the parameters that can be modified [below](/docs/slicing/modify-slices#slice-parameters).  ```python import network_as_code as nac from network_as_code.models.slice import (     Point,     AreaOfService,     NetworkIdentifier,     Slice,     SliceInfo,     Throughput )  client = nac.NetworkAsCodeClient(...)  # Get the slice you want to modify. slice = client.slices.get(\"slice-name_1\")  # Remember to reconfigure all the parameters you wish to modify, # The modify() method does not preserve previously configure ones. slice.modify(     max_data_connections = 12,     max_devices = 3,     slice_downlink_throughput=Throughput(guaranteed=10, maximum=10),     slice_uplink_throughput=Throughput(guaranteed=10, maximum=10),     device_downlink_throughput=Throughput(guaranteed=10, maximum=10),     device_uplink_throughput=Throughput(guaranteed=10, maximum=10) ) ```  ### Slice parameters  These are the slice parameters that can be modified using the `modify()` method and a brief description of them.  |                      **Parameters**                       | **Description**                                          | | :-------------------------------------------------------: | -------------------------------------------------------- | | `slice_uplink_throughput` or `slice_downlink_throughput`  | Specify the amount of bandwidth the slice can get.       | | `device_uplink_throughput` or `device_downlink_throughput` | Specify the amount of bandwidth the device can get.     | |                  `max_data_connections`                   | Maximum number of data connection sessions in the slice. | |                       `max_devices`                       | Maximum number of devices in the slice.                  |  #### What is a notification URL?  [Learn more](/docs/general-concepts/notification-url) about the notification URL/auth token and how to create a web server for them.  > **Note that** the snippets above assume > you have already created a slice before, > which you can learn how to do [here](/docs/slicing/creation). > It also implies that you have already created a [Network-as-Code client](/docs/general-concepts/network-as-code-client) > and [identified your mobile network device](/docs/general-concepts/identifying-devices#identifying-devices-by-ip-address-and-port)."}